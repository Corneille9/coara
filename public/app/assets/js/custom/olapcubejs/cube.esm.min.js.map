{"version":3,"file":"cube.esm.min.js","sources":["../src/errors.js","../src/console.js","../src/Fact.js","../src/Cell.js","../src/EmptyCell.js","../src/Member.js","../src/const.js","../src/InputMember.js","../src/SnowflakeBuilder.js","../src/DimensionTable.js","../src/Tree.js","../src/DimensionTree.js","../src/DimensionHierarchy.js","../src/Tuple.js","../src/Space.js","../src/isPlainObject.js","../src/Cube.js"],"sourcesContent":["export class InsufficientRollupData {\n\tconstructor(dimension, id) {\n\t\tthis.message = `Can't add member, member for rollup dimension: ${dimension} with id: ${id} not found`;\n\t}\n}\n\nexport class NotFoundFactId {\n\tconstructor(name) {\n\t\tthis.message = `In fact data, no property was found with the name: ${name}`\n\t}\n}\n\nexport class NotCompletelySpaceException {\n\tconstructor(dimension) {\n\t\tthis.message = `Not completely defined space for added member, not found member for dimension: \"${dimension}\"`;\n\t}\n}\n\nexport class CantAddMemberRollupException {\n\tconstructor(dimension, id) {\n\t\tthis.message = `Can't add member, rollup dimension: ${dimension} with id: ${id} not found`;\n\t}\n}\n\nexport class DimensionException {\n\tconstructor(dimension) {\n\t\tthis.message = `For the name \"${dimension}\" the dimension is already set`;\n\t}\n}\n\nexport const handleError = error => {\n\terror.message = `[Cube] ${error.message}`\n\tthrow error;\n};\n","const originalConsole = console;\nconst customConsole = {\n\tlog: string => {\n\t\toriginalConsole.log(`[Cube] ${string}`)\n\t},\n\twarn: string => {\n\t\toriginalConsole.warn(`[Cube] ${string}`)\n\t},\n\twarnOnce: (() => {\n\t\tconst memory = {};\n\t\treturn string => {\n\t\t\tif (!memory[string]) {\n\t\t\t\tmemory[string] = true;\n\t\t\t\toriginalConsole.warn(`[Cube] ${string}`)\n\t\t\t}\n\t\t};\n\t})()\n};\nexport default customConsole\n","import {handleError} from './errors.js'\nimport console from './console.js'\n\nconst isSimple = (value) => {\n\tlet type = typeof value;\n\treturn type !== 'object' && type !== 'function' && type !== 'undefined' || value === null\n};\n\nexport default class Fact {\n\t/**\n\t * @throw {NotFoundFactId}\n\t * */\n\tconstructor(data) {\n\t\ttry {\n\t\t\tfor (let key in data) {\n\t\t\t\tif (!data.hasOwnProperty(key)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (isSimple(data[key])) {\n\t\t\t\t\tthis[key] = data[key];\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn(`[Fact] value of prop \"${key}\" has an unspecified value: ${data[key]}`)\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\thandleError(error);\n\t\t}\n\t}\n}\n","import Fact from './Fact.js'\n\n/**\n * Cell. A piece of data obtained by defining one element\n * in each dimension of a multidimensional array.\n * The cells of the hypercube can be empty or full.\n *\n * These are aggregated data\n *\n * summary - to describe the values of data in cells\n *\n * each cell is an intersection of all the dimensions of the cube\n * */\nexport default class Cell extends Fact {\n\n}\n","import Cell from './Cell.js'\n\nfunction uuidv4() {\n\treturn 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n\t\tlet r = Math.random() * 16 | 0;\n\t\tlet v = c == 'x' ? r : (r & 0x3 | 0x8);\n\t\treturn v.toString(16);\n\t});\n}\n\n/**\n * Empty cells - in the fact table there is no data for them\n * The cell is identified by a tuple\n * */\nexport default class EmptyCell extends Cell {\n\tconstructor(data, options) {\n\t\tif (!data.id) {\n\t\t\tdata.id = EmptyCell.generateId()\n\t\t}\n\t\tsuper(data, options)\n\t}\n\t/**\n\t * @return {EmptyCell}\n\t * */\n\tstatic createEmptyCell(options) {\n\t\treturn new EmptyCell(options)\n\t}\n\t/**\n\t * @param {Cell|{ id: string|number }} cell\n\t * @return {boolean}\n\t * */\n\tstatic isEmptyCell(cell) {\n\t\treturn typeof cell.id === 'string'\n\t}\n\t/**\n\t * @return {string}\n\t * */\n\tstatic generateId() {\n\t\treturn uuidv4()\n\t}\n}\n","/**\n * Element of dimension. Serving to determine the position and description of the data element\n * */\nexport default class Member {\n\tconstructor(data) {\n\t\tObject.assign(this, data);\n\t}\n}\n","export const DEFAULT_TEMPLATE_FOREIGN_KEY = '%s_id';\nexport const DEFAULT_FACT_ID_PROP = 'id';\nexport const DEFAULT_MEMBER_ID_PROP = 'id';\n","import Member from './Member.js'\n\n/**\n * Introductory elements. Input elements have values that are manually loaded\n * that is, they are not the result of calculating data\n * */\nexport default class InputMember extends Member {}\n","import Member from './Member.js'\nimport InputMember from \"./InputMember.js\";\n\n/**\n * The main task is to parse the data array into tables\n *\n * is a special case of snowflake dimensionHierarchies\n * where every dimension is represented by one table even if the dimensions has multiple levels\n *\n * snowflaking - normalization process of measurement tables\n * */\nexport default class SnowflakeBuilder {\n\tstatic anotherBuild(factTable, cells, dimensionsTrees, cellTable, factPrimaryKey) {\n\n\t\t// for each dimension\n\t\tdimensionsTrees.forEach(dimensionTree => {\n\t\t\tSnowflakeBuilder.anotherBuildOne(dimensionTree, cells, cellTable, factTable, factPrimaryKey);\n\t\t});\n\t}\n\n\tstatic anotherBuildOne(dimensionTree, cells, cellTable, factTable, factPrimaryKey) {\n\t\t// for each hierarchy and level of dimension\n\t\tdimensionTree.tracePostOrder((dimensionTable, dimensionTree) => {\n\t\t\tSnowflakeBuilder.processDimension(dimensionTree, cells, cellTable, factTable, factPrimaryKey)\n\t\t});\n\t}\n\n\tstatic processDimension(dimensionTree, cells, cellTable, factTable, factPrimaryKey) {\n\t\tconst dimensionTable = dimensionTree.getTreeValue();\n\t\tconst { dimension, keyProps = [], otherProps = [], members: memberList, foreignKey, primaryKey } = dimensionTable;\n\t\tconst childIdAttributes = dimensionTree.getChildTrees().map(dimensionTree => dimensionTree.getTreeValue().foreignKey);\n\t\tconst childDimensions = dimensionTree.getChildTrees().map(dimensionTree => dimensionTree.getTreeValue().dimension);\n\n\t\tlet totalMemberList = [];\n\n\t\tconst existMemberCount = memberList.length;\n\t\tconst args = [factPrimaryKey, primaryKey, foreignKey, existMemberCount, factTable, cells, dimension, keyProps, otherProps, cells, cellTable];\n\n\t\tif (!childIdAttributes.length) {\n\t\t\tconst keyIdMap = SnowflakeBuilder.createKeyIdMap.apply(null, args);\n\t\t\ttotalMemberList = SnowflakeBuilder.createMembersDataByKeyIdMap(keyIdMap, cells, keyProps, otherProps, primaryKey, foreignKey);\n\t\t} else {\n\t\t\tlet entitiesParts = [];\n\n\t\t\tchildIdAttributes.forEach((childIdAttribute, index) => {\n\n\t\t\t\tconst firstChildDimension = childDimensions[index];\n\t\t\t\tconst dimensionTable = dimensionTree.getDimensionTreeByDimension(firstChildDimension).getTreeValue(); //here\n\t\t\t\tconst memberListForFilter = dimensionTable.members;\n\n\t\t\t\tentitiesParts = SnowflakeBuilder.mapFilter(childIdAttribute, cells, memberListForFilter, dimensionTable); //here\n\n\t\t\t\tlet countId = 0;\n\n\t\t\t\tentitiesParts.forEach(entitiesPart => {\n\t\t\t\t\tif (entitiesPart.length) {\n\n\t\t\t\t\t\tlet membersData;\n\n\t\t\t\t\t\t// order only for first child of level\n\t\t\t\t\t\tif (index === 0){\n\t\t\t\t\t\t\tconst entitiesArgs = [...args];\n\t\t\t\t\t\t\tentitiesArgs[5] = entitiesPart;\n\t\t\t\t\t\t\tentitiesArgs.push(countId);\n\t\t\t\t\t\t\tconst keyIdMap = SnowflakeBuilder.createKeyIdMap.apply(null, entitiesArgs);\n\t\t\t\t\t\t\tmembersData = SnowflakeBuilder.createMembersDataByKeyIdMap(keyIdMap, entitiesPart, keyProps, otherProps, primaryKey, foreignKey);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// then just search target member\n\t\t\t\t\t\t\tmembersData = entitiesPart.map(part => totalMemberList.find(data => part[foreignKey] === data[primaryKey]))\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcountId = countId + membersData.length;\n\n\t\t\t\t\t\tconst etalon = entitiesPart[0];\n\n\t\t\t\t\t\t// write data\n\t\t\t\t\t\tmembersData.forEach(member => {\n\t\t\t\t\t\t\tmember[childIdAttribute] = etalon[childIdAttribute];\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\t// clear source\n\t\t\t\t\t\tentitiesPart.forEach(entityPart => {\n\t\t\t\t\t\t\tdelete entityPart[childIdAttribute];\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tif (!totalMemberList.length){\n\t\t\t\t\t\t\tconst totalMemberListCount = totalMemberList.length;\n\t\t\t\t\t\t\tconst startFrom = existMemberCount + totalMemberListCount;\n\n\t\t\t\t\t\t\tmembersData.forEach((member, index) => {\n\t\t\t\t\t\t\t\tmember[primaryKey] = (startFrom + index + 1);\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\ttotalMemberList = membersData\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmembersData.forEach(data => {\n\t\t\t\t\t\t\t\tconst find = totalMemberList.find(memberData => memberData[primaryKey] === data[primaryKey]);\n\t\t\t\t\t\t\t\tif (find){\n\t\t\t\t\t\t\t\t\t// Object.assign(find, data)\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ttotalMemberList.push(data);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t})\n\t\t}\n\n\t\tfunction deleteProps(fact, props, factPrimaryKey) {\n\t\t\tprops.forEach(prop => {\n\t\t\t\tif (prop !== factPrimaryKey) {\n\t\t\t\t\tdelete fact[prop];\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// только после того как список сформирован, удалаять данные из ячеек\n\t\tcells.forEach(cell => {\n\t\t\tdeleteProps(cell, keyProps, factPrimaryKey);\n\t\t\tdeleteProps(cell, otherProps, factPrimaryKey);\n\t\t});\n\n\t\ttotalMemberList.map(data => new Member(data)).forEach(member => {\n\t\t\tdimensionTable.addMember(member)\n\t\t});\n\t}\n\n\t/**\n\t * Method filter cells by members of a dimension\n\t * @param {string} foreignKey\n\t * @param {Cell[]} cells\n\t * @param {Member[]} memberList\n\t * @param {DimensionTable} dimensionTable\n\t * @private\n\t * @return {Cell[]}\n\t * */\n\tstatic mapFilter(foreignKey, cells, memberList, dimensionTable) {\n\t\tconst cellTables = [];\n\t\t//todo оптимизировать поиск через хеш\n\t\tmemberList.forEach(member => {\n\t\t\tconst cellTableFiltered = cells.filter(cell => {\n\t\t\t\treturn cell[foreignKey] == dimensionTable.getMemberPrimaryKey(member);\n\t\t\t});\n\t\t\tcellTables.push(cellTableFiltered);\n\t\t});\n\t\treturn cellTables;\n\t}\n\n\t/**\n\t * The method of analyzing the data array and generating new dimension values\n\t *\n\t * @param {object[]} entitiesPart - Data array to the analysis of values for dimension\n\t * @param {number} startFrom\n\t * @param {string} dimension - The dimension for which members will be created\n\t * @param {string[]} keyProps - Names of properties whose values will be used to generate a key that will determine the uniqueness of the new member for dimension\n\t * @param {string[]} otherProps - Names of properties whose values will be appended to the dimension member along with the key properties\n\t * @param {Cell} cells\n\t * @param {Cell[]} cellTable\n\t * @return {[]}\n\t * @private\n\t * */\n\tstatic createKeyIdMap(\n\t\tfactPrimaryKey,\n\t\tprimaryKey,\n\t\tforeignKey,\n\t\texistMemberCount,\n\t\tfactTable,\n\t\tentitiesPart,\n\t\tdimension,\n\t\tkeyProps = [],\n\t\totherProps = [],\n\t\tcells,\n\t\tcellTable,\n\t\t// It is recommended that the key field be a simple integer because a key value is meaningless\n\t\tstartFrom = 0\n\t) {\n\t\t// соотношение созданных id к ключам\n\t\tconst keyIdMap = {};\n\t\tconst restoredCache = {};\n\n\t\t// need restore cache\n\t\tconst existedCells = cellTable.filter(cell => {\n\t\t\treturn cells.indexOf(cell) === -1\n\t\t});\n\t\texistedCells.forEach(cell => {\n\t\t\t// собрать ключ на основе ключевых значений\n\t\t\tconst fact = factTable.find(fact => fact[factPrimaryKey] === cell[factPrimaryKey]);\n\t\t\tconst surrogateKey = SnowflakeBuilder.createKeyFromProps(keyProps, fact);\n\t\t\t// если ключ уникальный создается подсущность и назначается ей присваивается уникальный id (уникальность достигается простым счетчиком)\n\t\t\tif (!(surrogateKey in restoredCache)) {\n\t\t\t\trestoredCache[surrogateKey] = ++startFrom;\n\t\t\t}\n\t\t});\n\n\t\t// создания групп по уникальным ключам\n\t\tentitiesPart.forEach(entityPart => {\n\n\t\t\t// собрать ключ на основе ключевых значений\n\t\t\tconst surrogateKey = SnowflakeBuilder.createKeyFromProps(keyProps, entityPart);\n\n\t\t\t// если ключ уникальный создается подсущность и назначается ей присваивается уникальный id (уникальность достигается простым счетчиком)\n\t\t\tif (!(surrogateKey in keyIdMap) && !(surrogateKey in restoredCache)) {\n\t\t\t\tkeyIdMap[surrogateKey] = ++startFrom;\n\t\t\t}\n\n\t\t\t// оставить в нормальной форме ссылку на id под сущности\n\t\t\tconst id = keyIdMap[surrogateKey];\n\t\t\tentityPart[foreignKey] = id;\n\t\t});\n\t\t\n\t\treturn keyIdMap;\n\t}\n\n\tstatic createMembersDataByKeyIdMap(keyIdMap, entitiesPart, keyProps, otherProps, primaryKey, foreignKey) {\n\t\tconst members = [];\n\n\t\tObject.keys(keyIdMap).forEach(key => {\n\t\t\tconst id = keyIdMap[key];\n\t\t\tconst entityPart = entitiesPart.find(entityPart => entityPart[foreignKey] === id);\n\t\t\tconst memberData = SnowflakeBuilder.createMemberData(id, [].concat(keyProps).concat(otherProps), entityPart, primaryKey);\n\n\t\t\tmembers.push(memberData);\n\t\t});\n\n\t\treturn members;\n\t}\n\n\tstatic createMemberData(id, props, data, primaryKey) {\n\t\tconst memberData = {};\n\t\tmemberData[primaryKey] = id;\n\t\tprops.forEach(prop => {\n\t\t\t// исключить идентификатор самой сущности\n\t\t\tif (prop !== primaryKey) {\n\t\t\t\tmemberData[prop] = data[prop]\n\t\t\t}\n\t\t});\n\t\treturn memberData\n\t}\n\n\tstatic createInputMember(id, memberData, data, primaryKey) {\n\t\tconst defaultValue = null;\n\t\tconst defaultData = {};\n\n\t\tmemberData.forEach(propName => {\n\t\t\tdefaultData[propName] = data.hasOwnProperty(propName) ? data[propName] : defaultValue\n\t\t});\n\n\t\tconst createdMemberData = SnowflakeBuilder.createMemberData(id, memberData, defaultData, primaryKey, InputMember);\n\t\treturn new InputMember(createdMemberData)\n\t}\n\n\tstatic createKeyFromProps(props, obj) {\n\t\tconst DIVIDER = ',';\n\n\t\treturn props.map(prop => {\n\t\t\treturn obj[prop]\n\t\t}).join(DIVIDER);\n\t}\n\n\tstatic destroy(cellTable, removedCells, dimensionHierarchies, cube) {\n\t\t// first remove cells\n\t\tremovedCells.forEach(removedCell => {\n\t\t\tconst index = cellTable.indexOf(removedCell);\n\t\t\tif (index !== -1) {\n\t\t\t\tcellTable.splice(index, 1);\n\t\t\t}\n\t\t});\n\t\t// then remove members\n\t\tremovedCells.forEach(fact => {\n\t\t\tdimensionHierarchies.forEach(dimensionTree => {\n\t\t\t\tSnowflakeBuilder.travers([fact], dimensionTree, [SnowflakeBuilder.removeMembers.bind(this, cube, dimensionTree), SnowflakeBuilder.restoreCell]);\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Method allows to generate fact tables from cells\n\t * */\n\tstatic denormalize(cellTable, dimensionTrees) {\n\t\tconst facts = [];\n\t\tcellTable.forEach(cell => {\n\t\t\tfacts.push({...cell})\n\t\t});\n\t\tfacts.forEach(fact => {\n\t\t\tdimensionTrees.forEach(dimensionTree => {\n\t\t\t\tSnowflakeBuilder.travers([fact], dimensionTree, [SnowflakeBuilder.restoreCell]);\n\t\t\t});\n\t\t});\n\n\t\treturn facts;\n\t}\n\tstatic restoreCell(member, memberList, dimension, cell, foreignKey, dimensionTable) {\n\t\tconst memberCopy = new Member(member);\n\t\tdimensionTable.deleteMemberId(memberCopy);\n\t\tdelete cell[foreignKey];\n\t\tObject.assign(cell, memberCopy)\n\t}\n\tstatic removeMembers(cube, dimensionTree, member, memberList, dimension, cell, foreignKey) {\n\t\tconst dicedCube = cube.dice({ [dimension]: member });\n\t\tconst dimensionTable = dimensionTree.getDimensionTreeByDimension(dimension).getTreeValue();\n\t\t// last cell was removed at the beginning of the algorithm,\n\t\t// so if the member is no longer used, the projection will be empty\n\t\tif (!dicedCube.getCells().length) {\n\t\t\tdimensionTable.removeMember(member)\n\t\t}\n\t}\n\n\tstatic travers(cellTable, dimensionTree, handlers = () => {}) {\n\t\tconst handleDimensionTree = (dimensionTable, cell) => {\n\t\t\tconst { dimension, members: memberList, foreignKey } = dimensionTable;\n\t\t\tconst idValue = cell[foreignKey];\n\t\t\tconst member = memberList.find(member => {\n\t\t\t\treturn dimensionTable.getMemberPrimaryKey(member) === idValue;\n\t\t\t});\n\t\t\thandlers.forEach(handler => {\n\t\t\t\thandler(member, memberList, dimension, cell, foreignKey, dimensionTable);\n\t\t\t})\n\t\t};\n\t\tcellTable.forEach(cell => {\n\t\t\tdimensionTree.tracePreOrder((tracedDimensionTable, tracedDimensionTree) => {\n\t\t\t\thandleDimensionTree(tracedDimensionTable, cell)\n\t\t\t})\n\t\t});\n\t}\n\n\t/**\n\t * Method allows to delete dimensionTree from cube,\n\t * the cells will be restored, and the members of the measurement are also deleted\n\t * */\n\tstatic destroyDimensionTree(cellTable, removedCells, dimensionTree, cube) {\n\t\tSnowflakeBuilder.travers(cellTable, dimensionTree, [SnowflakeBuilder.removeMembers.bind(this, cube, dimensionTree), SnowflakeBuilder.restoreCell]);\n\t}\n\n}\n","import Member from './Member.js'\nimport {DEFAULT_MEMBER_ID_PROP, DEFAULT_TEMPLATE_FOREIGN_KEY} from './const.js'\nimport SnowflakeBuilder from \"./SnowflakeBuilder.js\";\n\n/**\n * Dimension is a dimension of a cube. A dimension is a primary organizer of measure and attribute information in a cube\n * A dimension will contain some members organized in some hierarchy or hierarchies containing levels.\n * */\nexport default class DimensionTable {\n\tconstructor({ dimension, foreignKey = DimensionTable.genericId(dimension), primaryKey = DEFAULT_MEMBER_ID_PROP, keyProps, otherProps = [], members = [], defaultMemberOptions = {}}) {\n\t\tif (!dimension || !keyProps) {\n\t\t\tthrow Error('Bad definition DimensionTable, params \\\"dimension\\\" and \\\"keyProps\\\" is required');\n\t\t}\n\t\tif (Object.keys(defaultMemberOptions).indexOf(primaryKey) !== -1) {\n\t\t\tthrow Error('Bad definition DimensionTable, \\\"defaultMemberOptions\\\" must not contain a \\\"primaryKey\\\" property');\n\t\t}\n\t\t/** Name of the dimension */\n\t\tthis.dimension = dimension;\n\t\t/** id name */\n\t\tthis.foreignKey = foreignKey;\n\t\t/** id name */\n\t\tthis.primaryKey = primaryKey;\n\t\t/** List of key names properties of the table belonging to the current dimension */\n\t\tthis.keyProps = [].concat(keyProps);\n\t\t/** List of additional names properties of the table belonging to the current dimension */\n\t\tthis.otherProps = [].concat(otherProps);\n\t\t/** member list */\n\t\tthis.members = members.map(memberData => {\n\t\t\treturn new Member(memberData, this.primaryKey)\n\t\t});\n\t\t/** member default property options */\n\t\tthis.defaultMemberOptions = {...defaultMemberOptions};\n\t}\n\t/**\n\t *\n\t * */\n\tsetMemberList(members) {\n\t\t[].splice.apply(this.members, [0, this.members.length].concat(members))\n\t}\n\t/**\n\t *\n\t * */\n\tclearMemberList() {\n\t\tthis.members = [];\n\t}\n\tgetMemberPrimaryKey(member) {\n\t\treturn member[this.primaryKey]\n\t}\n\tgetMemberForeignKey(member) {\n\t\treturn member[this.foreignKey]\n\t}\n\t/**\n\t * @param {Member} member\n\t * */\n\taddMember(member) {\n\t\tif (this.members.indexOf(member) === -1) {\n\t\t\tthis.members.push(member)\n\t\t} else {\n\t\t\tconsole.log('boo')\n\t\t}\n\t}\n\t/**\n\t * @public\n\t * @param {object} memberOptions\n\t * @param {[]} linkProps\n\t * */\n\tcreateMember(memberOptions = {}, linkProps) {\n\t\t// todo тут нужна проверка на то, что все данные для члена измерения присутствуют\n\t\tconst memberData = {...this.defaultMemberOptions, ...memberOptions};\n\t\tconst { keyProps, otherProps, members, primaryKey } = this;\n\t\tconst keys = keyProps.concat(linkProps).concat(otherProps);\n\t\tconst id = DimensionTable.reduceId(members, primaryKey);\n\t\tconst member = SnowflakeBuilder.createInputMember(id, keys, memberData, primaryKey);// todo убрать отсюда\n\t\tthis.addMember(member);\n\t\treturn member;\n\t}\n\t/**\n\t * @public\n\t * Method of generating a unique identifier within the selected space\n\t * */\n\tstatic reduceId(members, primaryKey) {\n\t\tif (members.length) {\n\t\t\treturn members.reduce((acc, curValue) => {\n\t\t\t\treturn acc[primaryKey] > curValue[primaryKey] ? acc : curValue;\n\t\t\t}, 0)[primaryKey] + 1\n\t\t} else {\n\t\t\treturn 1;\n\t\t}\n\t}\n\t/**\n\t * @public\n\t * A way to create a name for a property in which a unique identifier will be stored\n\t * */\n\tstatic genericId(dimension) {\n\t\treturn DEFAULT_TEMPLATE_FOREIGN_KEY.replace('%s', dimension);\n\t}\n\tsetMemberId(member, id) {\n\t\tmember[this.primaryKey] = id;\n\t}\n\tdeleteMemberId(member) {\n\t\tdelete member[this.primaryKey]\n\t}\n\t/**\n\t *\n\t * */\n\tremoveMember(member) {\n\t\tconst index = this.members.indexOf(member);\n\t\tif (index === -1) {\n\t\t\tthrow new Error('represented member was not found', member);\n\t\t}\n\t\tthis.members.splice(index, 1);\n\t}\n\tstatic createDimensionTable(dimensionTable) {\n\t\treturn new DimensionTable(dimensionTable)\n\t}\n}\n","/**\n * Tree traversing https://en.wikipedia.org/wiki/Tree_traversal\n * @class Tree\n * @abstract class cannot be instantiated with new\n * */\nexport default class Tree {\n\t/**\n\t * @public\n\t * @abstract\n\t * @return {Object}\n\t * */\n\tgetTreeValue() {\n\t\tthrow 'abstract method'\n\t}\n\t/**\n\t * @public\n\t * @abstract\n\t * @return {Tree|null}\n\t * */\n\tgetParentTree() {\n\t\tthrow 'abstract method'\n\t}\n\t/**\n\t * @public\n\t * @abstract\n\t * @return {Tree[]}\n\t * */\n\tgetChildTrees() {\n\t\tthrow 'abstract method'\n\t}\n\t/**\n\t * @public\n\t * @return {boolean}\n\t * */\n\tisExternal() {\n\t\treturn !this.getChildTrees().length;\n\t}\n\t/**\n\t * @public\n\t * @return {boolean}\n\t * */\n\tisRoot() {\n\t\treturn this.getParentTree() === null;\n\t}\n\t/**\n\t * @public\n\t * Get root for that tree\n\t * @return {Tree}\n\t * */\n\tgetRoot() {\n\t\tlet root = this;\n\t\tthis.traceUpOrder((tracedTreeValue, tracedTree) => {\n\t\t\tif (tracedTree.isRoot()) {\n\t\t\t\troot = tracedTree;\n\t\t\t}\n\t\t});\n\t\treturn root;\n\t}\n\t/**\n\t * @public\n\t * A walk to root from current Tree, the current Tree and root entered to the chain\n\t * @param {function} callback\n\t * */\n\ttraceUpOrder(callback) {\n\t\tconst tree = this;\n\t\tconst parentTree = tree.getParentTree();\n\t\tconst treeValue = tree.getTreeValue();\n\t\tcallback(treeValue, tree);\n\t\tif (parentTree !== null) {\n\t\t\tparentTree.traceUpOrder(callback);\n\t\t}\n\t}\n\t/**\n\t * @public\n\t * A walk in which the children are traversed before their respective parents are traversed\n\t * @param {function} callback\n\t * */\n\ttracePostOrder(callback) {\n\t\tconst tree = this;\n\t\tconst childTrees = tree.getChildTrees();\n\t\tconst treeValue = tree.getTreeValue();\n\t\tif (childTrees.length) {\n\t\t\tchildTrees.forEach(childTree => {\n\t\t\t\tchildTree.tracePostOrder(callback);\n\t\t\t});\n\t\t}\n\t\tcallback(treeValue, tree);\n\t}\n\t/**\n\t * @public\n\t *  A walk in which each parent tree is traversed before its children is called a pre-order walk\n\t * */\n\ttracePreOrder(callback) {\n\t\tconst tree = this;\n\t\tconst childTrees = tree.getChildTrees();\n\t\tconst treeValue = tree.getTreeValue();\n\t\tcallback(treeValue, tree);\n\t\tif (childTrees.length) {\n\t\t\tchildTrees.forEach(childTree => {\n\t\t\t\tchildTree.tracePreOrder(callback);\n\t\t\t});\n\t\t}\n\t}\n}\n","import DimensionTable from './DimensionTable.js'\nimport Tree from './Tree.js'\nimport {DimensionException} from './errors.js'\n/**\n * It defines the relationship of generalization and specialization (roll-up/drill-down)\n * @throws {DimensionException}\n * */\nexport default class DimensionTree extends Tree {\n\tconstructor(dimensionTree) {\n\t\tsuper();\n\n\t\tconst {dimensionTable, level = [], parentNode = null} = dimensionTree;\n\t\t\n\t\tObject.defineProperties(this, {\n\t\t\tdimensionTable: {\n\t\t\t\t/**\n\t\t\t\t * @property\n\t\t\t\t * @name DimensionTree#dimensionTable\n\t\t\t\t * */\n\t\t\t\tvalue: DimensionTable.createDimensionTable(dimensionTable),\n\t\t\t\teditable: false,\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\tparentNode: {\n\t\t\t\t/**\n\t\t\t\t * @property {DimensionTree|null}\n\t\t\t\t * @name DimensionTree#parentNode\n\t\t\t\t * */\n\t\t\t\tvalue: parentNode,\n\t\t\t\tenumerable: false,\n\t\t\t\teditable: false\n\t\t\t},\n\t\t\tlevel: {\n\t\t\t\t/**\n\t\t\t\t * @property {DimensionTree[]}\n\t\t\t\t * @name DimensionTree#level\n\t\t\t\t * */\n\t\t\t\tvalue: level.map(dimensionTreeData => {\n\t\t\t\t\treturn new DimensionTree({ ...dimensionTreeData, parentNode: this })\n\t\t\t\t}),\n\t\t\t\tenumerable: true,\n\t\t\t\teditable: false\n\t\t\t}\n\t\t});\n\t\tthis.validateDimensions();\n\t}\n\tvalidateDimensions(){\n\t\tconst dimensions = [];\n\t\tthis.tracePostOrder(tracedDimensionTreeValue => {\n\t\t\tconst {dimension} = tracedDimensionTreeValue;\n\t\t\tif (dimensions.indexOf(dimension) === -1){\n\t\t\t\tdimensions.push(dimension)\n\t\t\t} else {\n\t\t\t\tthrow new DimensionException();\n\t\t\t}\n\t\t})\n\t}\n\tstatic createDimensionTree(dimensionTreeData) {\n\t\t// todo add validation\n\t\treturn new DimensionTree(dimensionTreeData);\n\t}\n\tstatic createProxyDimensionTree(dimensionTree){\n\t\tconst newDimensionTree = dimensionTree.cloneDimensionTreeWithoutMembers();\n\t\tdimensionTree.tracePostOrder(tracedTreeValue => {\n\t\t\tconst { dimension: tracedDimension, members } = tracedTreeValue;\n\t\t\t\n\t\t\tnewDimensionTree\n\t\t\t\t.getDimensionTreeByDimension(tracedDimension)\n\t\t\t\t.getTreeValue()\n\t\t\t\t.setMemberList(members);\n\t\t});\n\t\treturn newDimensionTree;\n\t}\n\t/**\n\t * @public\n\t * @return {DimensionTable}\n\t * */\n\tgetTreeValue() {\n\t\treturn this.dimensionTable;\n\t}\n\t/**\n\t * @public\n\t * @return {DimensionTree|null}\n\t * */\n\tgetParentTree() {\n\t\treturn this.parentNode;\n\t}\n\t/**\n\t * @public\n\t * @return {DimensionTree[]}\n\t * */\n\tgetChildTrees() {\n\t\treturn this.level;\n\t}\n\t/**\n\t * @public\n\t * @param {string} dimension\n\t * @return {DimensionTree|undefined}\n\t * */\n\tgetDimensionTreeByDimension(dimension) {\n\t\tconst root = this.getRoot();\n\t\tlet search = void 0;\n\t\troot.tracePostOrder((dimensionTreeValue, dimensionTree) => {\n\t\t\tif (dimensionTreeValue.dimension === dimension){\n\t\t\t\tsearch = dimensionTree;\n\t\t\t}\n\t\t});\n\t\treturn search;\n\t}\n\t/**\n\t * @public\n\t * @param {Member} member\n\t * @return {DimensionTree|undefined}\n\t * */\n\tcreateProjectionOntoMember(member) {\n\t\t// 1 create copy of hierarchy with empty members\n\t\tconst newDimensionTreeByMember = this.cloneDimensionTreeWithoutMembers();\n\n\t\tthis.projectDrillDown(newDimensionTreeByMember, member);\n\t\tthis.projectDrillUp(newDimensionTreeByMember, member);\n\n\t\treturn newDimensionTreeByMember;\n\t}\n\tprojectDrillDown(dimensionTree, member){\n\t\tthis.projectDrill(dimensionTree, member, \"traceUpOrder\", \"drillDownDimensionMembers\")\n\t}\n\tprojectDrillUp(dimensionTree, member){\n\t\tthis.projectDrill(dimensionTree, member, \"tracePreOrder\", \"drillUpDimensionMembers\")\n\t}\n\tprojectDrill(dimensionTree, member, traceMethodName, method){\n\t\tlet lastTracedMembers;\n\t\tlet lastTracedDimensionTree;\n\t\tthis[traceMethodName]((tracedDimensionTreeValue, tracedDimensionTree) => {\n\t\t\tconst { dimension: tracedDimension } = tracedDimensionTreeValue;\n\n\t\t\tconst drillMembers = tracedDimensionTree == this\n\t\t\t\t? [member]\n\t\t\t\t: lastTracedDimensionTree[method](lastTracedMembers);\n\n\t\t\tdimensionTree\n\t\t\t\t.getDimensionTreeByDimension(tracedDimension)\n\t\t\t\t.getTreeValue()\n\t\t\t\t.setMemberList(drillMembers);\n\n\t\t\tlastTracedMembers = drillMembers;\n\t\t\tlastTracedDimensionTree = tracedDimensionTree;\n\t\t});\n\t}\n\tcloneDimensionTreeWithoutMembers(){\n\t\t// todo new members must be not created here\n\t\tconst clone = new DimensionTree(this.getRoot());\n\t\tclone.tracePostOrder(dimensionTreeValue => {\n\t\t\tdimensionTreeValue.clearMemberList();\n\t\t});\n\t\treturn clone;\n\t}\n\t/**\n\t * @public\n\t * @param {Member} member\n\t * */\n\tremoveProjectionOntoMember(member) {\n\t\t// 1 get projection\n\t\tconst projectionDimensionTree = this.cloneDimensionTreeWithoutMembers();\n\t\tthis.projectDrillDown(projectionDimensionTree, member);\n\n\t\t// 2 subtract projection\n\t\tthis.subtractDimensionTree(projectionDimensionTree);\n\t\t// 3 return first level members of projection\n\t\tconst endToBeRemovedMember = {};\n\n\t\tconst {\n\t\t\tdimension: dimensionProjection,\n\t\t\tmembers: membersProjection\n\t\t} = projectionDimensionTree.getRoot().getTreeValue();\n\n\t\tendToBeRemovedMember[dimensionProjection] = membersProjection;\n\n\t\treturn endToBeRemovedMember;\n\t}\n\t/**\n\t * @private\n\t * @param {DimensionTree} dimensionTree\n\t * */\n\tsubtractDimensionTree(dimensionTree) {\n\t\t// remove intersection\n\t\tconst toBeRemovedSpace = {};\n\n\t\tdimensionTree.tracePostOrder(dimensionTreeValue => {\n\t\t\tconst {dimension, members} = dimensionTreeValue;\n\t\t\ttoBeRemovedSpace[dimension] = members;\n\t\t});\n\n\t\tconst memberList = this.getTreeValue().members;\n\n\t\t// travers down\n\t\tif (memberList.length === 1) {\n\t\t\tthis.tracePreOrder((tracedDimensionTable, tracedDimensionTree) => {\n\t\t\t\tconst {members: childMembers, dimension: childDimension} = tracedDimensionTable;\n\t\t\t\ttoBeRemovedSpace[childDimension] = childMembers;\n\t\t\t})\n\t\t}\n\n\t\t// remove removal space\n\t\tObject.keys(toBeRemovedSpace).forEach(dimension => {\n\t\t\tconst currentDimensionTree = this.getDimensionTreeByDimension(dimension);\n\t\t\tconst dimensionTable = currentDimensionTree.getTreeValue();\n\t\t\ttoBeRemovedSpace[dimension].forEach(member => {\n\t\t\t\tdimensionTable.removeMember(member);\n\t\t\t})\n\t\t});\n\t}\n\tunionDimensionTree(dimensionTree){\n\t\tconst toBeAddedSpace = {};\n\t\tdimensionTree.tracePostOrder(dimensionTreeValue => {\n\t\t\tconst {dimension, members} = dimensionTreeValue;\n\t\t\ttoBeAddedSpace[dimension] = members;\n\t\t});\n\n\t\tObject.keys(toBeAddedSpace).forEach(dimension => {\n\t\t\tconst currentDimensionTree = this.getDimensionTreeByDimension(dimension);\n\t\t\tconst dimensionTable = currentDimensionTree.getTreeValue();\n\t\t\ttoBeAddedSpace[dimension].forEach(member => {\n\t\t\t\tdimensionTable.addMember(member);\n\t\t\t})\n\t\t});\n\t}\n\t/**\n\t * @public\n\t * @param {Member[]} members\n\t * @return {Member[]}\n\t * */\n\tdrillDownDimensionMembers(members = this.getTreeValue().members) {\n\t\tif (this.isRoot()) {\n\t\t\treturn members;\n\t\t}\n\t\tconst parentTree = this.getParentTree();\n\t\tconst parentDimensionTable = parentTree.getTreeValue();\n\t\tconst dimensionTable = this.getTreeValue();\n\t\tconst { members: parentMembers } = parentDimensionTable;\n\t\tconst drillMembers = [];\n\t\tmembers.forEach(member => {\n\t\t\tparentMembers.forEach(parentMember => {\n\t\t\t\tif (dimensionTable.getMemberForeignKey(parentMember) === parentDimensionTable.getMemberPrimaryKey(member)) {\n\t\t\t\t\tif (drillMembers.indexOf(parentMember) === -1) {\n\t\t\t\t\t\tdrillMembers.push(parentMember)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t});\n\t\treturn drillMembers;\n\t}\n\t/**\n\t * @public\n\t * @this {DimensionTree}\n\t * @param {Member[]} members\n\t * @return {Member[]}\n\t * */\n\tdrillUpDimensionMembers(members = this.getTreeValue().members) {\n\t\tif (this.isExternal()) {\n\t\t\treturn members;\n\t\t}\n\t\tconst childTrees = this.getChildTrees();\n\t\tconst childTree = childTrees[0]; // todo not for one child always\n\t\tconst childDimensionTable = childTree.getTreeValue();\n\t\tconst { members: childMembers } = childDimensionTable;\n\t\tconst drillMembers = [];\n\t\tmembers.forEach(member => {\n\t\t\tchildMembers.forEach(childMember => {\n\t\t\t\tif (childDimensionTable.getMemberForeignKey(member) === childDimensionTable.getMemberPrimaryKey(childMember)) {\n\t\t\t\t\tif (drillMembers.indexOf(childMember) === -1) {\n\t\t\t\t\t\tdrillMembers.push(childMember)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t});\n\t\treturn drillMembers;\n\t}\n\t/**\n\t * @public\n\t * @param {object?} memberOptions\n\t * */\n\tcreateMember(memberOptions = {}) {\n\t\tconst dimensionTable = this.getTreeValue();\n\t\tconst childIdAttributes = this.getChildTrees().map(dimensionTree =>\n\t\t\tdimensionTree.getTreeValue().foreignKey\n\t\t);\n\t\tconst linkProps = [];\n\t\tchildIdAttributes.forEach(foreignKey => {\n\t\t\tlinkProps.push(foreignKey)\n\t\t});\n\t\treturn dimensionTable.createMember(memberOptions, linkProps)\n\t}\n}\n","import DimensionTree from './DimensionTree.js'\n\n/**\n * The elements of a dimension can be organized as a hierarchy\n * Hierarchy is a dimension hierarchy of a cube\n * */\nexport default class DimensionHierarchy {\n\tconstructor({ dimensionTree, activeDimension, hierarchy}) {\n\t\tif (!hierarchy) {\n\t\t\tthrow Error('attribute \"hierarchy\" must be defined')\n\t\t}\n\t\tthis.dimensionTree = dimensionTree instanceof DimensionTree\n\t\t\t? dimensionTree\n\t\t\t: DimensionTree.createDimensionTree(dimensionTree);\n\t\tthis.activeDimension = activeDimension || this.dimensionTree.getTreeValue().dimension;\n\t\tthis.hierarchy = hierarchy;\n\t}\n\tgetDimensionTree() {\n\t\treturn this.dimensionTree;\n\t}\n\thasDimension(dimension) {\n\t\treturn !!this.dimensionTree.getDimensionTreeByDimension(dimension);\n\t}\n\tgetActiveDimension() {\n\t\treturn this.activeDimension;\n\t}\n\tsetActiveDimension(activeDimension) {\n\t\tthis.activeDimension = activeDimension;\n\t}\n\tgetHierarchy() {\n\t\treturn this.hierarchy;\n\t}\n\tstatic createDimensionHierarchy(dimensionHierarchy) {\n\t\treturn new DimensionHierarchy(dimensionHierarchy)\n\t}\n}\n","/**\n * The cell is identified by a tuple\n * tuples can uniquely identify every cell in the cube\n * Tuple is an ordered collection of one or more members from different dimensions\n * */\nexport default class Tuple {\n\tconstructor(options) {\n\t\tObject.assign(this, options)\n\t}\n}\n","export default class Space {\n\t/**\n\t *\n\t * */\n\tstatic union() {\n\t\tconst newSpace = {};\n\t\tconst arg = [...arguments];\n\t\targ.forEach(space => {\n\t\t\tSpace.add(newSpace, space);\n\t\t});\n\t\treturn newSpace;\n\t}\n\t/**\n\t *\n\t * */\n\tstatic add(targetSpace, otherSpace) {\n\t\tObject.keys(otherSpace).forEach(key => {\n\t\t\tif (!targetSpace[key]) {\n\t\t\t\ttargetSpace[key] = [];\n\t\t\t}\n\t\t\tArray.prototype.push.apply(targetSpace[key], otherSpace[key])\n\t\t})\n\t}\n}\n","const toString = Object.prototype.toString\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction getTag(value) {\n\tif (value == null) {\n\t\treturn value === undefined ? '[object Undefined]' : '[object Null]'\n\t}\n\treturn toString.call(value)\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * isObjectLike({})\n * // => true\n *\n * isObjectLike([1, 2, 3])\n * // => true\n *\n * isObjectLike(Function)\n * // => false\n *\n * isObjectLike(null)\n * // => false\n */\nfunction isObjectLike(value) {\n\treturn typeof value == 'object' && value !== null\n}\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1\n * }\n *\n * isPlainObject(new Foo)\n * // => false\n *\n * isPlainObject([1, 2, 3])\n * // => false\n *\n * isPlainObject({ 'x': 0, 'y': 0 })\n * // => true\n *\n * isPlainObject(Object.create(null))\n * // => true\n */\nfunction isPlainObject(value) {\n\tif (!isObjectLike(value) || getTag(value) != '[object Object]') {\n\t\treturn false\n\t}\n\tif (Object.getPrototypeOf(value) === null) {\n\t\treturn true\n\t}\n\tlet proto = value\n\twhile (Object.getPrototypeOf(proto) !== null) {\n\t\tproto = Object.getPrototypeOf(proto)\n\t}\n\treturn Object.getPrototypeOf(value) === proto\n}\n\nexport default isPlainObject","import EmptyCell from './EmptyCell.js'\nimport Member from './Member.js'\nimport DimensionTree from './DimensionTree.js'\nimport DimensionHierarchy from './DimensionHierarchy.js'\nimport DimensionTable from './DimensionTable.js'\nimport {\n\tInsufficientRollupData,\n} from './errors.js';\nimport SnowflakeBuilder from './SnowflakeBuilder.js'\nimport console from './console.js'\nimport Tuple from './Tuple.js'\nimport Space from './Space.js'\nimport Cell from './Cell.js'\nimport { DEFAULT_FACT_ID_PROP } from './const.js'\nimport isPlainObject from \"./isPlainObject.js\"\nimport {NotFoundFactId} from \"./errors.js\";\n\n/**\n * It a means to retrieve data\n *\n * Base class for normalizing a denormalized data array\n * and analyzing query according to a given scheme\n *\n * */\nclass Cube {\n\t/**\n\t * @param {object | Cube} cube\n\t * @throw {TypeError}\n\t * */\n\tconstructor(cube = {}) {\n\t\tif (!(isPlainObject(cube) || cube instanceof Cube)){\n\t\t\tthrow TypeError('The argument must be plain object or instance of Cube')\n\t\t}\n\t\tlet {\n\t\t\tdimensionHierarchies = [],\n\t\t\tcellTable = [],\n\t\t\tdefaultFactOptions = {},\n\t\t\tfactPrimaryKey = DEFAULT_FACT_ID_PROP\n\t\t} = cube;\n\n\t\tthis.defaultFactOptions = defaultFactOptions;\n\t\tthis.factPrimaryKey = factPrimaryKey;\n\n\t\tthis.dimensionHierarchies = dimensionHierarchies.map(dimensionHierarchy => {\n\t\t\t// duck\n\t\t\tif (dimensionHierarchy.hierarchy) {\n\t\t\t\tif (dimensionHierarchy instanceof DimensionHierarchy) {\n\t\t\t\t\treturn dimensionHierarchy;\n\t\t\t\t} else {\n\t\t\t\t\treturn DimensionHierarchy.createDimensionHierarchy(dimensionHierarchy);\n\t\t\t\t}\n\t\t\t} else if (dimensionHierarchy.dimensionTable) {\n\t\t\t\tif ( dimensionHierarchy instanceof DimensionTree ){\n\t\t\t\t\treturn dimensionHierarchy;\n\t\t\t\t} else {\n\t\t\t\t\treturn DimensionTree.createDimensionTree(dimensionHierarchy);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (dimensionHierarchy instanceof DimensionTable) {\n\t\t\t\t\treturn dimensionHierarchy;\n\t\t\t\t} else {\n\t\t\t\t\treturn DimensionTable.createDimensionTable(dimensionHierarchy);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tthis.cellTable = cellTable.map(cellData => {\n\t\t\tif (cellData instanceof Cell) {\n\t\t\t\treturn cellData\n\t\t\t} else {\n\t\t\t\treturn EmptyCell.isEmptyCell(cellData) ? new EmptyCell(cellData) : new Cell(cellData)\n\t\t\t}\n\t\t});\n\n\t\t// const residuals = residuals(this);\n\t\t// const count = residuals.length;\n\t\t// if (count > 0) {\n\t\t// \tconsole.warn('Fact table has residuals', residuals)\n\t\t// }\n\t}\n\t/**\n\t * is the act of picking a rectangular subset of a cube by choosing a single value\n\t * for one of its dimensions, creating a new cube with one fewer dimension.\n\t * @public\n\t * @param {string} dimension\n\t * @param {Member} member\n\t * @return {Cube}\n\t * */\n\tslice(dimension, member) {\n\t\treturn this.dice({ [dimension]: member })\n\t}\n\t/**\n\t * @public\n\t * @param {object} set\n\t * @return {Cube}\n\t * @throw {TypeError}\n\t * @throw {RangeError}\n\t * */\n\tdice(set) {\n\t\tif (!(isPlainObject(set) || set instanceof Tuple)){\n\t\t\tthrow TypeError(\"The argument must be a plain object\")\n\t\t}\n\t\t\n\t\t// always work with arrays as value\n\t\tconst toMultiset = (value) => {\n\t\t\treturn Array.isArray(value) ? value : [value];\n\t\t};\n\t\t\n\t\t// change member data to original member objects\n\t\tconst toOriginal = (membersData, dimension) => {\n\t\t\tconst dimensionTree = getDimensionTreeByDimension.call(this, dimension);\n\t\t\tconst dimensionTable = dimensionTree.getTreeValue();\n\t\t\tconst members = dimensionTable.members;\n\t\t\t//replace memberData with original members\n\t\t\tmembersData.forEach((memberData, index) => {\n\t\t\t\tlet member = members.find(member => dimensionTable.getMemberPrimaryKey(member) === dimensionTable.getMemberPrimaryKey(memberData));\n\t\t\t\tif (!member) {\n\t\t\t\t\tthrow RangeError(`Not found member by id ${dimensionTable.getMemberPrimaryKey(member)}`)\n\t\t\t\t}\n\t\t\t\tif (membersData instanceof Member){\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tmembersData[index] = member;\n\t\t\t});\n\t\t\treturn membersData;\n\t\t};\n\t\t\n\t\tconst originalMultiset = {};\n\t\tObject.keys(set).forEach((dimension) => {\n\t\t\tlet value = set[dimension];\n\t\t\tvalue = toMultiset(value);\n\t\t\tvalue = toOriginal(value, dimension);\n\t\t\toriginalMultiset[dimension] = value;\n\t\t});\n\t\t\n\t\tconst dimensions = Object.keys(originalMultiset);\n\t\t\n\t\t// 1 make one projection on to member\n\t\tconst dimensionHierarchiesLength = this.dimensionHierarchies.length;\n\t\tif (dimensions.length > dimensionHierarchiesLength) {\n\t\t\tthrow Error(`Set must have a size not more than ${dimensionHierarchiesLength} dimensions`)\n\t\t}\n\n\t\tconst projectionDimensionHierarchies = [];\n\n\t\t// for every dimension in set\n\t\tconst totalSpaces = dimensions.map(dimension => {\n\n\t\t\tlet dimensionTreeProjection;\n\t\t\tconst members = originalMultiset[dimension];\n\t\t\t// ищется его расширенная версия для каждого члена\n\t\t\tconst spacesForCells = members.map(member => {\n\n\t\t\t\tlet searchedInTree = getDimensionTreeByDimension.call(this, dimension);\n\n\t\t\t\tconst current = searchedInTree.cloneDimensionTreeWithoutMembers();\n\n\t\t\t\tsearchedInTree.projectDrillDown(current, member);\n\t\t\t\tsearchedInTree.projectDrillUp(current, member);\n\n\t\t\t\tif (dimensionTreeProjection){\n\t\t\t\t\tdimensionTreeProjection.unionDimensionTree(current)\n\t\t\t\t} else {\n\t\t\t\t\tdimensionTreeProjection = current;\n\t\t\t\t}\n\t\t\t\tconst {\n\t\t\t\t\tdimension: dimensionProjection,\n\t\t\t\t\tmembers: membersProjection\n\t\t\t\t} = dimensionTreeProjection.getRoot().getTreeValue();\n\n\t\t\t\treturn { [dimensionProjection]: membersProjection };\n\t\t\t});\n\n\t\t\tif (dimensionTreeProjection){\n\t\t\t\tprojectionDimensionHierarchies.push(dimensionTreeProjection);\n\t\t\t}\n\n\t\t\t// после чего эти расширенные версии объекдиняются\n\t\t\tconst totalSpace = Space.union(...spacesForCells);\n\n\t\t\treturn totalSpace;\n\t\t});\n\n\t\t// фильтрация продолжается\n\t\tlet filteredCellTable = this.getCells();\n\n\t\tconst cellBelongsToSpace = (cell, space) => {\n\t\t\tconst somePropOfCellNotBelongToSpace = Object.keys(space).some(dimension => {\n\t\t\t\tconst members = space[dimension];\n\t\t\t\tconst { foreignKey, primaryKey } = getDimensionTreeByDimension.call(this, dimension).getTreeValue();\n\t\t\t\tconst finded = members.find(member => {\n\t\t\t\t\treturn member[primaryKey] === cell[foreignKey]\n\t\t\t\t});\n\t\t\t\treturn !finded;\n\t\t\t});\n\t\t\treturn !somePropOfCellNotBelongToSpace;\n\t\t};\n\n\t\ttotalSpaces.forEach(space => {\n\t\t\t// и ищутся те ячейки, которые принадлежат получившейся области\n\t\t\tfilteredCellTable = filteredCellTable.filter(cell => {\n\t\t\t\treturn cellBelongsToSpace(cell, space)\n\t\t\t});\n\t\t});\n\n\t\t// 2 create new list of dimensionHierarchies\n\t\tconst newDimensionHierarchies = [];\n\t\tthis.dimensionHierarchies.forEach(originalDimensionHierarchy => {\n\t\t\tlet finded = false;\n\t\t\tprojectionDimensionHierarchies.forEach(projectionDimensionHierarchy => {\n\t\t\t\tif (originalDimensionHierarchy.getTreeValue().dimension === projectionDimensionHierarchy.getTreeValue().dimension) {\n\t\t\t\t\tnewDimensionHierarchies.push(projectionDimensionHierarchy);\n\t\t\t\t\tfinded = true;\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (!finded) {\n\t\t\t\tconst { members, dimension } = originalDimensionHierarchy.getTreeValue();\n\t\t\t\tconst projectionDimensionHierarchy = DimensionTree.createProxyDimensionTree(originalDimensionHierarchy);\n\t\t\t\tmembers.forEach(member => {\n\t\t\t\t\tlet memberBelongToCells = false;\n\t\t\t\t\tfilteredCellTable.forEach(filteredCell => {\n\t\t\t\t\t\tif (cellBelongsToSpace(filteredCell, { [dimension]: [member] })) {\n\t\t\t\t\t\t\tmemberBelongToCells = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tif (!memberBelongToCells) {\n\t\t\t\t\t\tlet has = projectionDimensionHierarchy.getTreeValue().members.indexOf(member) !== -1;\n\t\t\t\t\t\tif (has) {\n\t\t\t\t\t\t\tprojectionDimensionHierarchy.removeProjectionOntoMember(member)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tnewDimensionHierarchies.push(projectionDimensionHierarchy);\n\t\t\t}\n\t\t});\n\n\t\treturn new SubCube({\n\t\t\tcellTable: filteredCellTable,\n\t\t\tdimensionHierarchies: newDimensionHierarchies,\n\t\t\toriginalCube: this.originalCube || this,\n\t\t\tpreviousCube: this\n\t\t})\n\t}\n\t/**\n\t * The cube introduces generalization relations\n\t * it's operations on dimension hierarchies\n\t * @public\n\t * @param {string} hierarchy\n\t * @param {string} targetDimension\n\t * @return {Cube}\n\t * */\n\tdrillUp(hierarchy, targetDimension) {\n\t\tconst currentHierarchy = getHierarchy.call(this, hierarchy);\n\t\tif (currentHierarchy && currentHierarchy.hasDimension(targetDimension)) {\n\t\t\tcurrentHierarchy.setActiveDimension(targetDimension);\n\t\t}\n\t\treturn this;\n\t}\n\t/**\n\t * The cube introduced specialization relations\n\t * it's operations on dimension hierarchies\n\t * @public\n\t * @param {string} hierarchy\n\t * @param {string} targetDimension\n\t * @return {Cube}\n\t * */\n\tdrillDown(hierarchy, targetDimension) {\n\t\tconst currentHierarchy = getHierarchy.call(this, hierarchy);\n\t\tif (currentHierarchy && currentHierarchy.hasDimension(targetDimension)) {\n\t\t\tcurrentHierarchy.setActiveDimension(targetDimension);\n\t\t}\n\t\treturn this;\n\t}\n\t/**\n\t * @public\n\t * @return {Fact[]} returns facts\n\t * */\n\tgetFacts() {\n\t\treturn denormalize.call(this, this.getCells());\n\t}\n\t/**\n\t * @public\n\t * @param {Object[]} facts\n\t * @throw {TypeError}\n\t * @return {Cube}\n\t * */\n\taddFacts(facts) {\n\t\tif (!Array.isArray(facts)){\n\t\t\tthrow TypeError('The argument must be instance of Array')\n\t\t}\n\t\tfacts.forEach(validateFactData.bind(null, this.factPrimaryKey));\n\t\tconst cells = facts.map(fact => new Cell(fact));\n\t\t[].push.apply(this.getCells(), cells);\n\t\tconst factTable = this.getFacts();\n\t\tSnowflakeBuilder.anotherBuild(factTable, cells, getDimensionTrees.call(this), this.getCells(), this.factPrimaryKey);\n\t\treturn this;\n\t}\n\t/**\n\t * @public\n\t * @param {Object[]} facts\n\t * @throw {TypeError}\n\t * */\n\tremoveFacts(facts) {\n\t\tif (!Array.isArray(facts)){\n\t\t\tthrow TypeError('The argument must be instance of Array')\n\t\t}\n\t\tconst cellTable = this.getCells();\n\t\tconst factPrimaryKey = this.factPrimaryKey;\n\t\tconst removedCells = facts.map(fact => {\n\t\t\treturn cellTable.find(cell => cell[factPrimaryKey] === fact[factPrimaryKey])\n\t\t});\n\t\tthis.removeCells(removedCells);\n\t}\n\t/**\n\t * @public\n\t * @return {Cell[]}\n\t * */\n\tgetCells() {\n\t\treturn this.cellTable;\n\t}\n\t/**\n\t * @public\n\t * @param {Cell[]} cells\n\t * @throw {TypeError}\n\t * */\n\tremoveCells(cells) {\n\t\tif (!Array.isArray(cells)){\n\t\t\tthrow TypeError('The argument must be instance of Array')\n\t\t}\n\t\tcells.forEach((cell) => {\n\t\t\tif (!(cell instanceof Cell)){\n\t\t\t\tthrow TypeError('The list of cells must contain only instances of Cell and EmptyCell')\n\t\t\t}\n\t\t});\n\t\tSnowflakeBuilder.destroy(this.getCells(), cells, this.dimensionHierarchies, this);\n\t}\n\t/**\n\t * @public\n\t * @param {string} dimension - dimension from which the member will be found\n\t * @return {Member[]} returns members\n\t * @throw {TypeError}\n\t * */\n\tgetDimensionMembers(dimension) {\n\t\tif (!(typeof dimension === 'string')){\n\t\t\tthrow TypeError('The first argument must be string')\n\t\t}\n\t\tconst dimensionTree = getDimensionTreeByDimension.call(this, dimension);\n\t\treturn dimensionTree.getTreeValue().members;\n\t}\n\t/**\n\t * @public\n\t * @param {string} dimension - dimension in which the member is created\n\t * @param {object?} customMemberOptions - properties for the created member\n\t * @param {object?} rollupCoordinatesData\n\t * @param {object?} drillDownCoordinatesOptions\n\t * @param {object?} cellData\n\t * @throw {InsufficientRollupData}\n\t * */\n\taddDimensionMember(dimension, customMemberOptions = {}, rollupCoordinatesData = {}, drillDownCoordinatesOptions = {}, cellData = {}) {\n\t\tif (!(typeof dimension === 'string')){\n\t\t\tthrow TypeError('The first argument must be instance of string')\n\t\t}\n\t\tif (!(\n\t\t\tisPlainObject(customMemberOptions)\n\t\t\t&& isPlainObject(rollupCoordinatesData)\n\t\t\t&& isPlainObject(drillDownCoordinatesOptions)\n\t\t\t&& isPlainObject(cellData)\n\t\t)){\n\t\t\tthrow TypeError('The arguments after the first must be plain objects')\n\t\t}\n\t\t\n\t\t// todo №1, а если члены с такими ключами уже существуют, нужнен варнинг, потому что, после десериализации член исчезнет, если не будут изменены значения ключевых полей\n\t\tconst rollupCoordinates = {};\n\t\tObject.keys(rollupCoordinatesData).forEach(dimension => {\n\t\t\tconst memberData = rollupCoordinatesData[dimension];\n\t\t\tconst memberList = this.getDimensionMembers(dimension);\n\t\t\tconst dimensionTable = getDimensionTreeByDimension.call(this, dimension).getTreeValue();\n\t\t\tconst { primaryKey } = dimensionTable;\n\t\t\tconst id = memberData[primaryKey];\n\t\t\tconst find = memberList.find(member => {\n\t\t\t\treturn id === dimensionTable.getMemberPrimaryKey(member)\n\t\t\t});\n\t\t\tif (!find) {\n\t\t\t\tthrow new InsufficientRollupData(dimension, id)\n\t\t\t} else {\n\t\t\t\trollupCoordinates[dimension] = find;\n\t\t\t}\n\t\t});\n\t\tconst dimensionTree = getDimensionTreeByDimension.call(this, dimension);\n\t\tconst childDimensionTrees = dimensionTree.getChildTrees();\n\t\tconst dimensionTable = dimensionTree.getTreeValue();\n\t\tconst { foreignKey } = dimensionTable;\n\t\tconst foreignKeysMemberData = {};\n\t\tchildDimensionTrees.forEach(childDimensionTree => {\n\t\t\tconst dimensionTable = childDimensionTree.getTreeValue();\n\t\t\tconst { dimension, foreignKey, primaryKey } = dimensionTable;\n\t\t\tconst member = rollupCoordinatesData[dimension];\n\t\t\tif (!member) {\n\t\t\t\tthrow new InsufficientRollupData(dimension)\n\t\t\t} else {\n\t\t\t\tforeignKeysMemberData[foreignKey] = member[primaryKey];\n\t\t\t}\n\t\t});\n\t\t// todo проверить, что customMemberOptions не содержит внешних ключей\n\t\tconst memberOptions = Object.assign({}, customMemberOptions, foreignKeysMemberData);\n\n\t\tlet saveMember = dimensionTree.createMember(memberOptions);\n\t\tlet saveIdAttribute = foreignKey;\n\t\tdimensionTree.traceUpOrder((tracedDimensionTable, tracedDimensionTree) => {\n\t\t\tif (dimensionTree !== tracedDimensionTree) {\n\t\t\t\tconst { dimension: parentDimension, foreignKey: parentIdAttribute } = tracedDimensionTable;\n\t\t\t\tconst drillDownCoordinatesData = { [ saveIdAttribute]: dimensionTable.getMemberPrimaryKey(saveMember) };\n\t\t\t\tObject.assign(drillDownCoordinatesData, drillDownCoordinatesOptions[parentDimension]);\n\t\t\t\tsaveMember = tracedDimensionTree.createMember(drillDownCoordinatesData);\n\t\t\t\tsaveIdAttribute = parentIdAttribute;\n\t\t\t}\n\t\t});\n\t\tthis.fillEmptyCells(cellData);\n\t}\n\t/**\n\t * @public\n\t * @param {string} dimension - dimension from which the member will be removed\n\t * @param {Member} member - the member will be removed\n\t * throw {TypeError}\n\t * */\n\tremoveDimensionMember(dimension, member) {\n\t\tif (!(typeof dimension === 'string')){\n\t\t\tthrow TypeError('The first argument must be instance of string')\n\t\t}\n\t\tif (!(member instanceof Member)){\n\t\t\tthrow TypeError('The second argument must be instance of Member')\n\t\t}\n\t\tconst dimensionTree = getDimensionTreeByDimension.call(this, dimension);\n\t\tconst endToBeRemoved = dimensionTree.removeProjectionOntoMember(member);\n\t\tconst cellTable = this.getCells();\n\t\tconst getRemoveMeasures = (dimension, members) => {\n\t\t\tconst removedCells = [];\n\t\t\tconst dimensionTable = dimensionTree.getDimensionTreeByDimension(dimension).getTreeValue();\n\t\t\tconst foreignKey = dimensionTable.foreignKey;\n\n\t\t\t// todo mapFilter похоже\n\t\t\tcellTable.forEach(cell => {\n\t\t\t\tmembers.forEach(member => {\n\t\t\t\t\tif (cell[foreignKey] == dimensionTable.getMemberPrimaryKey(member)) {\n\t\t\t\t\t\tremovedCells.push(cell)\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t});\n\t\t\treturn removedCells;\n\t\t};\n\t\tObject.keys(endToBeRemoved).map(dimension => {\n\t\t\tconst removedMeasures = getRemoveMeasures(dimension, endToBeRemoved[dimension]);\n\t\t\tremovedMeasures.forEach(cell => {\n\t\t\t\tconst index = cellTable.indexOf(cell);\n\t\t\t\tif (index !== -1) {\n\t\t\t\t\tcellTable.splice(index, 1);\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\t}\n\t/**\n\t * @public\n\t * @param {object|DimensionTree} dimensionHierarchy\n\t * @throw {TypeError}\n\t * */\n\taddDimensionHierarchy(dimensionHierarchy) {\n\t\tconst dimensionTree = DimensionTree.createDimensionTree(dimensionHierarchy);\n\t\tthis.dimensionHierarchies.push(\n\t\t\tdimensionTree\n\t\t);\n\t\tSnowflakeBuilder.anotherBuildOne(dimensionTree, this.getCells(), this.getCells(), this.getCells(), this.factPrimaryKey);\n\t}\n\t/**\n\t * @public\n\t * @param {DimensionTree} dimensionHierarchy\n\t * */\n\tremoveDimensionHierarchy(dimensionHierarchy) {\n\t\tif (!(dimensionHierarchy instanceof DimensionTree)){\n\t\t\tthrow TypeError('The argument must be instance of DimensionTree')\n\t\t}\n\t\t// first remove members\n\t\tSnowflakeBuilder.destroyDimensionTree(this.getCells(), this.getCells(), dimensionHierarchy, this);\n\t\t// then target dimension hierarchy\n\t\tthis.dimensionHierarchies.splice(this.dimensionHierarchies.indexOf(dimensionHierarchy), 1);\n\t}\n\t/**\n\t * @public\n\t * @return {EmptyCell[]}\n\t * @throw {TypeError}\n\t * */\n\tcreateEmptyCells(cellOptions = {}) {\n\t\tif (!isPlainObject(cellOptions)){\n\t\t\tthrow TypeError('Cell option argument must be a pure object')\n\t\t}\n\t\tconst emptyCells = [];\n\t\tconst tuples = Cube.cartesian(this);\n\t\ttuples.forEach(tuple => {\n\t\t\tconst unique = this.dice(tuple).getCells();\n\t\t\tif (!unique.length) {\n\t\t\t\tconst foreignKeysCellData = {};\n\t\t\t\tObject.keys(tuple).forEach(dimension => {\n\t\t\t\t\tconst dimensionTree = getDimensionTreeByDimension.call(this, dimension);\n\t\t\t\t\tconst dimensionTable = dimensionTree.getTreeValue();\n\t\t\t\t\tconst { foreignKey } = dimensionTable;\n\t\t\t\t\tforeignKeysCellData[foreignKey] = dimensionTable.getMemberPrimaryKey(tuple[dimension])\n\t\t\t\t});\n\t\t\t\tconst cellData = {\n\t\t\t\t\t...this.defaultFactOptions,\n\t\t\t\t\t...cellOptions,\n\t\t\t\t\t...foreignKeysCellData,\n\t\t\t\t};\n\t\t\t\t// todo нужна правеврка на то, что все свойства присутствуют, для этого нужна инф-ия о именах таких полей в схеме\n\t\t\t\tconst cell = EmptyCell.createEmptyCell(cellData);\n\t\t\t\temptyCells.push(cell);\n\t\t\t}\n\t\t});\n\t\treturn emptyCells;\n\t}\n\t/**\n\t * @public\n\t * @return {EmptyCell[]}\n\t * */\n\tgetEmptyCells() {\n\t\treturn this.getCells().filter(cell => EmptyCell.isEmptyCell(cell))\n\t}\n\t/**\n\t * @public\n\t * @param {Cell} cell\n\t * @return {boolean}\n\t * */\n\tisEmptyCell(cell) {\n\t\treturn EmptyCell.isEmptyCell(cell);\n\t}\n\t/**\n\t * @public\n\t * @param {EmptyCell[]} emptyCells\n\t * @throw {TypeError}\n\t * */\n\taddEmptyCells(emptyCells) {\n\t\tif (!Array.isArray(emptyCells)){\n\t\t\tthrow TypeError('The argument must be instance of Array')\n\t\t}\n\t\temptyCells.forEach((emptyCell, index) => {\n\t\t\tif (!this.isEmptyCell(emptyCell)) {\n\t\t\t\tthrow TypeError(`Some item in list of argument is not instances of EmptyCell, index: ${index}`)\n\t\t\t}\n\t\t});\n\t\t[].push.apply(this.getCells(), emptyCells);\n\t}\n\t/**\n\t * @public\n\t * Filling method for full size of cube\n\t * @param {object?} cellOptions - properties for empty cells\n\t * */\n\tfillEmptyCells(cellOptions) {\n\t\t// todo why here residuals? add test for that\n\t\tif (!residuals(this).length) {\n\t\t\tconst emptyCells = this.createEmptyCells(cellOptions);\n\t\t\tthis.addEmptyCells(emptyCells);\n\t\t}\n\t}\n\t/**\n\t * Check that the argument is an instance of SubCube\n\t * @return {boolean}\n\t * */\n\tisSubCube(){\n\t\treturn this instanceof SubCube;\n\t}\n\t/**\n\t * Cartesian product - list of all possible tuples\n\t * @param {Cube} cube\n\t * @return {Tuple[]}\n\t * */\n\tstatic cartesian(cube) {\n\t\tif (!(cube instanceof Cube)){\n\t\t\tthrow TypeError('The argument must be instance of Cube')\n\t\t}\n\t\tconst f = (a, b) => [].concat(...a.map(d => {\n\t\t\treturn b.map(e => {\n\t\t\t\treturn [].concat(d, e)\n\t\t\t})\n\t\t}));\n\t\t\n\t\tconst cartesian = (a, b, ...c) => {\n\t\t\treturn b ? cartesian(f(a, b), ...c) : a\n\t\t};\n\t\t\n\t\tconst dimensionsOrder = [];\n\t\t\n\t\tconst set = cube.dimensionHierarchies.map(dimensionTree => dimensionTree.getTreeValue()).map(dimensionTable => {\n\t\t\tdimensionsOrder.push(dimensionTable.dimension);\n\t\t\treturn dimensionTable.members;\n\t\t});\n\t\t\n\t\tconst tupleList = [];\n\t\t\n\t\tlet res;\n\t\tif (set.length) {\n\t\t\tif (set.length > 1) {\n\t\t\t\tres = cartesian.apply(null, set);\n\t\t\t} else {\n\t\t\t\tres = set[0].map(i => [i])\n\t\t\t}\n\t\t\tres.forEach(arr => {\n\t\t\t\tconst item = {};\n\t\t\t\tdimensionsOrder.forEach((dimension, index) => {\n\t\t\t\t\titem[dimension] = arr[index]\n\t\t\t\t});\n\t\t\t\ttupleList.push(new Tuple(item));\n\t\t\t\treturn item;\n\t\t\t});\n\t\t}\n\t\t\n\t\treturn tupleList;\n\t}\n}\n\n/**\n * SubCube is the target cube whose members are members of the source cube.\n * */\nclass SubCube extends Cube {\n\tconstructor({originalCube, previousCube, ...rest}){\n\t\tsuper(rest);\n\t\t/** link for chaining between operations */\n\t\tthis.originalCube = originalCube;\n\t\t/** link for chaining between operations */\n\t\tthis.previousCube = previousCube;\n\t}\n}\n\n/**\n * @this {Cube}\n * @return {DimensionHierarchy}\n * */\nfunction getHierarchy(hierarchy) {\n\treturn this.dimensionHierarchies.find(dimensionHierarchy => {\n\t\treturn dimensionHierarchy.getHierarchy() === hierarchy\n\t});\n}\n/**\n * @this {Cube}\n * @return {DimensionTree}\n * */\nfunction getDimensionTreeByDimension(dimension) {\n\tlet findDimensionTree;\n\tthis.dimensionHierarchies.forEach(dimensionTree => {\n\t\tconst searchedDimensionTree = dimensionTree.getDimensionTreeByDimension(dimension);\n\t\tif (searchedDimensionTree) {\n\t\t\tfindDimensionTree = dimensionTree.getDimensionTreeByDimension(dimension);\n\t\t}\n\t});\n\tif (!findDimensionTree) {\n\t\tthrow RangeError(`Not existed dimension: ${dimension}`);\n\t}\n\treturn findDimensionTree;\n}\n/**\n * @this {Cube}\n * @return {DimensionTree[]}\n * */\nfunction getDimensionTrees() {\n\treturn this.dimensionHierarchies.map(dimensionHierarchy => {\n\t\treturn dimensionHierarchy.getDimensionTree\n\t\t\t? dimensionHierarchy.getDimensionTree()\n\t\t\t: dimensionHierarchy\n\t})\n}\n/**\n * @private\n * Get facts from cube\n * */\nfunction denormalize(cells = this.getCells(), forSave = true) {\n\tconst data = SnowflakeBuilder.denormalize(cells, getDimensionTrees.call(this));\n\tif (forSave) {\n\t\tdata.forEach((data, index) => {\n\t\t\tif (cells[index] instanceof EmptyCell) {\n\t\t\t\tdelete data[this.factPrimaryKey];\n\t\t\t}\n\t\t})\n\t}\n\treturn data;\n}\n/**\n * @public\n * Residuals - list of tuples, according to which there is more than one member\n * @return {Tuple[]}\n * */\nfunction residuals(cube) {\n\tconst tuples = Cube.cartesian(cube);\n\tconst totalTuples = [];\n\ttuples.forEach(tuple => {\n\t\tconst partFacts = cube.dice(tuple).getFacts();\n\t\tif (partFacts.length > 1) {\n\t\t\ttotalTuples.push(tuple)\n\t\t}\n\t});\n\treturn totalTuples;\n}\n/**\n * Unfilled - list of tuples, in accordance with which there is not a single member\n * @@param {Cube} cube\n * */\nfunction unfilled(cube) {\n\tconst tuples = Cube.cartesian(cube);\n\tconst unfilled = [];\n\ttuples.forEach(tuple => {\n\t\tconst members = this.dice(tuple).getFacts(tuple);\n\t\tif (members.length === 0) {\n\t\t\tunfilled.push(tuple)\n\t\t}\n\t});\n\treturn unfilled;\n}\n\nfunction validateFactData(factPrimaryKey, factData){\n\tif (!factData.hasOwnProperty(factPrimaryKey)) {\n\t\tthrow new NotFoundFactId(factPrimaryKey)\n\t}\n}\n\nexport default Cube"],"names":["InsufficientRollupData","[object Object]","dimension","id","this","message","NotFoundFactId","name","DimensionException","handleError","error","originalConsole","console","customConsole","log","string","warn","warnOnce","memory","isSimple","value","type","Fact","data","key","hasOwnProperty","Cell","uuidv4","replace","c","r","Math","random","toString","EmptyCell","options","generateId","super","cell","Member","Object","assign","DEFAULT_TEMPLATE_FOREIGN_KEY","DEFAULT_FACT_ID_PROP","DEFAULT_MEMBER_ID_PROP","InputMember","SnowflakeBuilder","factTable","cells","dimensionsTrees","cellTable","factPrimaryKey","forEach","dimensionTree","anotherBuildOne","tracePostOrder","dimensionTable","processDimension","getTreeValue","keyProps","otherProps","members","memberList","foreignKey","primaryKey","childIdAttributes","getChildTrees","map","childDimensions","totalMemberList","existMemberCount","length","args","entitiesParts","childIdAttribute","index","firstChildDimension","getDimensionTreeByDimension","memberListForFilter","mapFilter","countId","entitiesPart","membersData","entitiesArgs","push","keyIdMap","createKeyIdMap","apply","createMembersDataByKeyIdMap","part","find","etalon","member","entityPart","memberData","totalMemberListCount","startFrom","deleteProps","fact","props","prop","addMember","cellTables","cellTableFiltered","filter","getMemberPrimaryKey","restoredCache","indexOf","surrogateKey","createKeyFromProps","keys","createMemberData","concat","defaultData","propName","createdMemberData","obj","join","removedCells","dimensionHierarchies","cube","removedCell","splice","travers","removeMembers","bind","restoreCell","dimensionTrees","facts","memberCopy","deleteMemberId","dicedCube","dice","getCells","removeMember","handlers","tracePreOrder","tracedDimensionTable","tracedDimensionTree","idValue","handler","handleDimensionTree","DimensionTable","genericId","defaultMemberOptions","Error","memberOptions","linkProps","reduceId","createInputMember","reduce","acc","curValue","Tree","getParentTree","root","traceUpOrder","tracedTreeValue","tracedTree","isRoot","callback","parentTree","childTrees","treeValue","childTree","DimensionTree","level","parentNode","defineProperties","createDimensionTable","editable","enumerable","dimensionTreeData","validateDimensions","dimensions","tracedDimensionTreeValue","newDimensionTree","cloneDimensionTreeWithoutMembers","tracedDimension","setMemberList","getRoot","search","dimensionTreeValue","newDimensionTreeByMember","projectDrillDown","projectDrillUp","projectDrill","traceMethodName","method","lastTracedMembers","lastTracedDimensionTree","drillMembers","clone","clearMemberList","projectionDimensionTree","subtractDimensionTree","endToBeRemovedMember","dimensionProjection","membersProjection","toBeRemovedSpace","childMembers","childDimension","toBeAddedSpace","parentDimensionTable","parentMembers","parentMember","getMemberForeignKey","isExternal","childDimensionTable","childMember","createMember","DimensionHierarchy","activeDimension","hierarchy","createDimensionTree","dimensionHierarchy","Tuple","Space","newSpace","arguments","space","add","targetSpace","otherSpace","Array","prototype","getTag","undefined","call","isObjectLike","isPlainObject","getPrototypeOf","proto","Cube","TypeError","defaultFactOptions","createDimensionHierarchy","cellData","isEmptyCell","set","toOriginal","RangeError","originalMultiset","isArray","toMultiset","dimensionHierarchiesLength","projectionDimensionHierarchies","totalSpaces","dimensionTreeProjection","spacesForCells","searchedInTree","current","unionDimensionTree","union","filteredCellTable","cellBelongsToSpace","some","newDimensionHierarchies","originalDimensionHierarchy","finded","projectionDimensionHierarchy","createProxyDimensionTree","memberBelongToCells","filteredCell","removeProjectionOntoMember","SubCube","originalCube","previousCube","targetDimension","currentHierarchy","getHierarchy","hasDimension","setActiveDimension","denormalize","validateFactData","getFacts","anotherBuild","getDimensionTrees","removeCells","destroy","customMemberOptions","rollupCoordinatesData","drillDownCoordinatesOptions","getDimensionMembers","childDimensionTrees","foreignKeysMemberData","childDimensionTree","saveMember","saveIdAttribute","parentDimension","parentIdAttribute","drillDownCoordinatesData","fillEmptyCells","endToBeRemoved","getRemoveMeasures","destroyDimensionTree","cellOptions","emptyCells","cartesian","tuple","foreignKeysCellData","createEmptyCell","emptyCell","residuals","createEmptyCells","addEmptyCells","a","b","d","e","f","dimensionsOrder","tupleList","res","i","arr","item","rest","findDimensionTree","getDimensionTree","forSave","tuples","totalTuples","factData"],"mappings":"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"}