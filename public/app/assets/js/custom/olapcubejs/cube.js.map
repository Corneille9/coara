{"version":3,"file":"cube.js","sources":["../src/errors.js","../src/console.js","../src/Fact.js","../src/Cell.js","../src/EmptyCell.js","../src/Member.js","../src/const.js","../src/InputMember.js","../src/SnowflakeBuilder.js","../src/DimensionTable.js","../src/Tree.js","../src/DimensionTree.js","../src/DimensionHierarchy.js","../src/Tuple.js","../src/Space.js","../src/isPlainObject.js","../src/Cube.js"],"sourcesContent":["export class InsufficientRollupData {\n\tconstructor(dimension, id) {\n\t\tthis.message = `Can't add member, member for rollup dimension: ${dimension} with id: ${id} not found`;\n\t}\n}\n\nexport class NotFoundFactId {\n\tconstructor(name) {\n\t\tthis.message = `In fact data, no property was found with the name: ${name}`\n\t}\n}\n\nexport class NotCompletelySpaceException {\n\tconstructor(dimension) {\n\t\tthis.message = `Not completely defined space for added member, not found member for dimension: \"${dimension}\"`;\n\t}\n}\n\nexport class CantAddMemberRollupException {\n\tconstructor(dimension, id) {\n\t\tthis.message = `Can't add member, rollup dimension: ${dimension} with id: ${id} not found`;\n\t}\n}\n\nexport class DimensionException {\n\tconstructor(dimension) {\n\t\tthis.message = `For the name \"${dimension}\" the dimension is already set`;\n\t}\n}\n\nexport const handleError = error => {\n\terror.message = `[Cube] ${error.message}`\n\tthrow error;\n};\n","const originalConsole = console;\nconst customConsole = {\n\tlog: string => {\n\t\toriginalConsole.log(`[Cube] ${string}`)\n\t},\n\twarn: string => {\n\t\toriginalConsole.warn(`[Cube] ${string}`)\n\t},\n\twarnOnce: (() => {\n\t\tconst memory = {};\n\t\treturn string => {\n\t\t\tif (!memory[string]) {\n\t\t\t\tmemory[string] = true;\n\t\t\t\toriginalConsole.warn(`[Cube] ${string}`)\n\t\t\t}\n\t\t};\n\t})()\n};\nexport default customConsole\n","import {handleError} from './errors.js'\nimport console from './console.js'\n\nconst isSimple = (value) => {\n\tlet type = typeof value;\n\treturn type !== 'object' && type !== 'function' && type !== 'undefined' || value === null\n};\n\nexport default class Fact {\n\t/**\n\t * @throw {NotFoundFactId}\n\t * */\n\tconstructor(data) {\n\t\ttry {\n\t\t\tfor (let key in data) {\n\t\t\t\tif (!data.hasOwnProperty(key)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (isSimple(data[key])) {\n\t\t\t\t\tthis[key] = data[key];\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn(`[Fact] value of prop \"${key}\" has an unspecified value: ${data[key]}`)\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\thandleError(error);\n\t\t}\n\t}\n}\n","import Fact from './Fact.js'\n\n/**\n * Cell. A piece of data obtained by defining one element\n * in each dimension of a multidimensional array.\n * The cells of the hypercube can be empty or full.\n *\n * These are aggregated data\n *\n * summary - to describe the values of data in cells\n *\n * each cell is an intersection of all the dimensions of the cube\n * */\nexport default class Cell extends Fact {\n\n}\n","import Cell from './Cell.js'\n\nfunction uuidv4() {\n\treturn 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n\t\tlet r = Math.random() * 16 | 0;\n\t\tlet v = c == 'x' ? r : (r & 0x3 | 0x8);\n\t\treturn v.toString(16);\n\t});\n}\n\n/**\n * Empty cells - in the fact table there is no data for them\n * The cell is identified by a tuple\n * */\nexport default class EmptyCell extends Cell {\n\tconstructor(data, options) {\n\t\tif (!data.id) {\n\t\t\tdata.id = EmptyCell.generateId()\n\t\t}\n\t\tsuper(data, options)\n\t}\n\t/**\n\t * @return {EmptyCell}\n\t * */\n\tstatic createEmptyCell(options) {\n\t\treturn new EmptyCell(options)\n\t}\n\t/**\n\t * @param {Cell|{ id: string|number }} cell\n\t * @return {boolean}\n\t * */\n\tstatic isEmptyCell(cell) {\n\t\treturn typeof cell.id === 'string'\n\t}\n\t/**\n\t * @return {string}\n\t * */\n\tstatic generateId() {\n\t\treturn uuidv4()\n\t}\n}\n","/**\n * Element of dimension. Serving to determine the position and description of the data element\n * */\nexport default class Member {\n\tconstructor(data) {\n\t\tObject.assign(this, data);\n\t}\n}\n","export const DEFAULT_TEMPLATE_FOREIGN_KEY = '%s_id';\nexport const DEFAULT_FACT_ID_PROP = 'id';\nexport const DEFAULT_MEMBER_ID_PROP = 'id';\n","import Member from './Member.js'\n\n/**\n * Introductory elements. Input elements have values that are manually loaded\n * that is, they are not the result of calculating data\n * */\nexport default class InputMember extends Member {}\n","import Member from './Member.js'\nimport InputMember from \"./InputMember.js\";\n\n/**\n * The main task is to parse the data array into tables\n *\n * is a special case of snowflake dimensionHierarchies\n * where every dimension is represented by one table even if the dimensions has multiple levels\n *\n * snowflaking - normalization process of measurement tables\n * */\nexport default class SnowflakeBuilder {\n\tstatic anotherBuild(factTable, cells, dimensionsTrees, cellTable, factPrimaryKey) {\n\n\t\t// for each dimension\n\t\tdimensionsTrees.forEach(dimensionTree => {\n\t\t\tSnowflakeBuilder.anotherBuildOne(dimensionTree, cells, cellTable, factTable, factPrimaryKey);\n\t\t});\n\t}\n\n\tstatic anotherBuildOne(dimensionTree, cells, cellTable, factTable, factPrimaryKey) {\n\t\t// for each hierarchy and level of dimension\n\t\tdimensionTree.tracePostOrder((dimensionTable, dimensionTree) => {\n\t\t\tSnowflakeBuilder.processDimension(dimensionTree, cells, cellTable, factTable, factPrimaryKey)\n\t\t});\n\t}\n\n\tstatic processDimension(dimensionTree, cells, cellTable, factTable, factPrimaryKey) {\n\t\tconst dimensionTable = dimensionTree.getTreeValue();\n\t\tconst { dimension, keyProps = [], otherProps = [], members: memberList, foreignKey, primaryKey } = dimensionTable;\n\t\tconst childIdAttributes = dimensionTree.getChildTrees().map(dimensionTree => dimensionTree.getTreeValue().foreignKey);\n\t\tconst childDimensions = dimensionTree.getChildTrees().map(dimensionTree => dimensionTree.getTreeValue().dimension);\n\n\t\tlet totalMemberList = [];\n\n\t\tconst existMemberCount = memberList.length;\n\t\tconst args = [factPrimaryKey, primaryKey, foreignKey, existMemberCount, factTable, cells, dimension, keyProps, otherProps, cells, cellTable];\n\n\t\tif (!childIdAttributes.length) {\n\t\t\tconst keyIdMap = SnowflakeBuilder.createKeyIdMap.apply(null, args);\n\t\t\ttotalMemberList = SnowflakeBuilder.createMembersDataByKeyIdMap(keyIdMap, cells, keyProps, otherProps, primaryKey, foreignKey);\n\t\t} else {\n\t\t\tlet entitiesParts = [];\n\n\t\t\tchildIdAttributes.forEach((childIdAttribute, index) => {\n\n\t\t\t\tconst firstChildDimension = childDimensions[index];\n\t\t\t\tconst dimensionTable = dimensionTree.getDimensionTreeByDimension(firstChildDimension).getTreeValue(); //here\n\t\t\t\tconst memberListForFilter = dimensionTable.members;\n\n\t\t\t\tentitiesParts = SnowflakeBuilder.mapFilter(childIdAttribute, cells, memberListForFilter, dimensionTable); //here\n\n\t\t\t\tlet countId = 0;\n\n\t\t\t\tentitiesParts.forEach(entitiesPart => {\n\t\t\t\t\tif (entitiesPart.length) {\n\n\t\t\t\t\t\tlet membersData;\n\n\t\t\t\t\t\t// order only for first child of level\n\t\t\t\t\t\tif (index === 0){\n\t\t\t\t\t\t\tconst entitiesArgs = [...args];\n\t\t\t\t\t\t\tentitiesArgs[5] = entitiesPart;\n\t\t\t\t\t\t\tentitiesArgs.push(countId);\n\t\t\t\t\t\t\tconst keyIdMap = SnowflakeBuilder.createKeyIdMap.apply(null, entitiesArgs);\n\t\t\t\t\t\t\tmembersData = SnowflakeBuilder.createMembersDataByKeyIdMap(keyIdMap, entitiesPart, keyProps, otherProps, primaryKey, foreignKey);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// then just search target member\n\t\t\t\t\t\t\tmembersData = entitiesPart.map(part => totalMemberList.find(data => part[foreignKey] === data[primaryKey]))\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcountId = countId + membersData.length;\n\n\t\t\t\t\t\tconst etalon = entitiesPart[0];\n\n\t\t\t\t\t\t// write data\n\t\t\t\t\t\tmembersData.forEach(member => {\n\t\t\t\t\t\t\tmember[childIdAttribute] = etalon[childIdAttribute];\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\t// clear source\n\t\t\t\t\t\tentitiesPart.forEach(entityPart => {\n\t\t\t\t\t\t\tdelete entityPart[childIdAttribute];\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tif (!totalMemberList.length){\n\t\t\t\t\t\t\tconst totalMemberListCount = totalMemberList.length;\n\t\t\t\t\t\t\tconst startFrom = existMemberCount + totalMemberListCount;\n\n\t\t\t\t\t\t\tmembersData.forEach((member, index) => {\n\t\t\t\t\t\t\t\tmember[primaryKey] = (startFrom + index + 1);\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\ttotalMemberList = membersData\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmembersData.forEach(data => {\n\t\t\t\t\t\t\t\tconst find = totalMemberList.find(memberData => memberData[primaryKey] === data[primaryKey]);\n\t\t\t\t\t\t\t\tif (find){\n\t\t\t\t\t\t\t\t\t// Object.assign(find, data)\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ttotalMemberList.push(data);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t})\n\t\t}\n\n\t\tfunction deleteProps(fact, props, factPrimaryKey) {\n\t\t\tprops.forEach(prop => {\n\t\t\t\tif (prop !== factPrimaryKey) {\n\t\t\t\t\tdelete fact[prop];\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// только после того как список сформирован, удалаять данные из ячеек\n\t\tcells.forEach(cell => {\n\t\t\tdeleteProps(cell, keyProps, factPrimaryKey);\n\t\t\tdeleteProps(cell, otherProps, factPrimaryKey);\n\t\t});\n\n\t\ttotalMemberList.map(data => new Member(data)).forEach(member => {\n\t\t\tdimensionTable.addMember(member)\n\t\t});\n\t}\n\n\t/**\n\t * Method filter cells by members of a dimension\n\t * @param {string} foreignKey\n\t * @param {Cell[]} cells\n\t * @param {Member[]} memberList\n\t * @param {DimensionTable} dimensionTable\n\t * @private\n\t * @return {Cell[]}\n\t * */\n\tstatic mapFilter(foreignKey, cells, memberList, dimensionTable) {\n\t\tconst cellTables = [];\n\t\t//todo оптимизировать поиск через хеш\n\t\tmemberList.forEach(member => {\n\t\t\tconst cellTableFiltered = cells.filter(cell => {\n\t\t\t\treturn cell[foreignKey] == dimensionTable.getMemberPrimaryKey(member);\n\t\t\t});\n\t\t\tcellTables.push(cellTableFiltered);\n\t\t});\n\t\treturn cellTables;\n\t}\n\n\t/**\n\t * The method of analyzing the data array and generating new dimension values\n\t *\n\t * @param {object[]} entitiesPart - Data array to the analysis of values for dimension\n\t * @param {number} startFrom\n\t * @param {string} dimension - The dimension for which members will be created\n\t * @param {string[]} keyProps - Names of properties whose values will be used to generate a key that will determine the uniqueness of the new member for dimension\n\t * @param {string[]} otherProps - Names of properties whose values will be appended to the dimension member along with the key properties\n\t * @param {Cell} cells\n\t * @param {Cell[]} cellTable\n\t * @return {[]}\n\t * @private\n\t * */\n\tstatic createKeyIdMap(\n\t\tfactPrimaryKey,\n\t\tprimaryKey,\n\t\tforeignKey,\n\t\texistMemberCount,\n\t\tfactTable,\n\t\tentitiesPart,\n\t\tdimension,\n\t\tkeyProps = [],\n\t\totherProps = [],\n\t\tcells,\n\t\tcellTable,\n\t\t// It is recommended that the key field be a simple integer because a key value is meaningless\n\t\tstartFrom = 0\n\t) {\n\t\t// соотношение созданных id к ключам\n\t\tconst keyIdMap = {};\n\t\tconst restoredCache = {};\n\n\t\t// need restore cache\n\t\tconst existedCells = cellTable.filter(cell => {\n\t\t\treturn cells.indexOf(cell) === -1\n\t\t});\n\t\texistedCells.forEach(cell => {\n\t\t\t// собрать ключ на основе ключевых значений\n\t\t\tconst fact = factTable.find(fact => fact[factPrimaryKey] === cell[factPrimaryKey]);\n\t\t\tconst surrogateKey = SnowflakeBuilder.createKeyFromProps(keyProps, fact);\n\t\t\t// если ключ уникальный создается подсущность и назначается ей присваивается уникальный id (уникальность достигается простым счетчиком)\n\t\t\tif (!(surrogateKey in restoredCache)) {\n\t\t\t\trestoredCache[surrogateKey] = ++startFrom;\n\t\t\t}\n\t\t});\n\n\t\t// создания групп по уникальным ключам\n\t\tentitiesPart.forEach(entityPart => {\n\n\t\t\t// собрать ключ на основе ключевых значений\n\t\t\tconst surrogateKey = SnowflakeBuilder.createKeyFromProps(keyProps, entityPart);\n\n\t\t\t// если ключ уникальный создается подсущность и назначается ей присваивается уникальный id (уникальность достигается простым счетчиком)\n\t\t\tif (!(surrogateKey in keyIdMap) && !(surrogateKey in restoredCache)) {\n\t\t\t\tkeyIdMap[surrogateKey] = ++startFrom;\n\t\t\t}\n\n\t\t\t// оставить в нормальной форме ссылку на id под сущности\n\t\t\tconst id = keyIdMap[surrogateKey];\n\t\t\tentityPart[foreignKey] = id;\n\t\t});\n\t\t\n\t\treturn keyIdMap;\n\t}\n\n\tstatic createMembersDataByKeyIdMap(keyIdMap, entitiesPart, keyProps, otherProps, primaryKey, foreignKey) {\n\t\tconst members = [];\n\n\t\tObject.keys(keyIdMap).forEach(key => {\n\t\t\tconst id = keyIdMap[key];\n\t\t\tconst entityPart = entitiesPart.find(entityPart => entityPart[foreignKey] === id);\n\t\t\tconst memberData = SnowflakeBuilder.createMemberData(id, [].concat(keyProps).concat(otherProps), entityPart, primaryKey);\n\n\t\t\tmembers.push(memberData);\n\t\t});\n\n\t\treturn members;\n\t}\n\n\tstatic createMemberData(id, props, data, primaryKey) {\n\t\tconst memberData = {};\n\t\tmemberData[primaryKey] = id;\n\t\tprops.forEach(prop => {\n\t\t\t// исключить идентификатор самой сущности\n\t\t\tif (prop !== primaryKey) {\n\t\t\t\tmemberData[prop] = data[prop]\n\t\t\t}\n\t\t});\n\t\treturn memberData\n\t}\n\n\tstatic createInputMember(id, memberData, data, primaryKey) {\n\t\tconst defaultValue = null;\n\t\tconst defaultData = {};\n\n\t\tmemberData.forEach(propName => {\n\t\t\tdefaultData[propName] = data.hasOwnProperty(propName) ? data[propName] : defaultValue\n\t\t});\n\n\t\tconst createdMemberData = SnowflakeBuilder.createMemberData(id, memberData, defaultData, primaryKey, InputMember);\n\t\treturn new InputMember(createdMemberData)\n\t}\n\n\tstatic createKeyFromProps(props, obj) {\n\t\tconst DIVIDER = ',';\n\n\t\treturn props.map(prop => {\n\t\t\treturn obj[prop]\n\t\t}).join(DIVIDER);\n\t}\n\n\tstatic destroy(cellTable, removedCells, dimensionHierarchies, cube) {\n\t\t// first remove cells\n\t\tremovedCells.forEach(removedCell => {\n\t\t\tconst index = cellTable.indexOf(removedCell);\n\t\t\tif (index !== -1) {\n\t\t\t\tcellTable.splice(index, 1);\n\t\t\t}\n\t\t});\n\t\t// then remove members\n\t\tremovedCells.forEach(fact => {\n\t\t\tdimensionHierarchies.forEach(dimensionTree => {\n\t\t\t\tSnowflakeBuilder.travers([fact], dimensionTree, [SnowflakeBuilder.removeMembers.bind(this, cube, dimensionTree), SnowflakeBuilder.restoreCell]);\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Method allows to generate fact tables from cells\n\t * */\n\tstatic denormalize(cellTable, dimensionTrees) {\n\t\tconst facts = [];\n\t\tcellTable.forEach(cell => {\n\t\t\tfacts.push({...cell})\n\t\t});\n\t\tfacts.forEach(fact => {\n\t\t\tdimensionTrees.forEach(dimensionTree => {\n\t\t\t\tSnowflakeBuilder.travers([fact], dimensionTree, [SnowflakeBuilder.restoreCell]);\n\t\t\t});\n\t\t});\n\n\t\treturn facts;\n\t}\n\tstatic restoreCell(member, memberList, dimension, cell, foreignKey, dimensionTable) {\n\t\tconst memberCopy = new Member(member);\n\t\tdimensionTable.deleteMemberId(memberCopy);\n\t\tdelete cell[foreignKey];\n\t\tObject.assign(cell, memberCopy)\n\t}\n\tstatic removeMembers(cube, dimensionTree, member, memberList, dimension, cell, foreignKey) {\n\t\tconst dicedCube = cube.dice({ [dimension]: member });\n\t\tconst dimensionTable = dimensionTree.getDimensionTreeByDimension(dimension).getTreeValue();\n\t\t// last cell was removed at the beginning of the algorithm,\n\t\t// so if the member is no longer used, the projection will be empty\n\t\tif (!dicedCube.getCells().length) {\n\t\t\tdimensionTable.removeMember(member)\n\t\t}\n\t}\n\n\tstatic travers(cellTable, dimensionTree, handlers = () => {}) {\n\t\tconst handleDimensionTree = (dimensionTable, cell) => {\n\t\t\tconst { dimension, members: memberList, foreignKey } = dimensionTable;\n\t\t\tconst idValue = cell[foreignKey];\n\t\t\tconst member = memberList.find(member => {\n\t\t\t\treturn dimensionTable.getMemberPrimaryKey(member) === idValue;\n\t\t\t});\n\t\t\thandlers.forEach(handler => {\n\t\t\t\thandler(member, memberList, dimension, cell, foreignKey, dimensionTable);\n\t\t\t})\n\t\t};\n\t\tcellTable.forEach(cell => {\n\t\t\tdimensionTree.tracePreOrder((tracedDimensionTable, tracedDimensionTree) => {\n\t\t\t\thandleDimensionTree(tracedDimensionTable, cell)\n\t\t\t})\n\t\t});\n\t}\n\n\t/**\n\t * Method allows to delete dimensionTree from cube,\n\t * the cells will be restored, and the members of the measurement are also deleted\n\t * */\n\tstatic destroyDimensionTree(cellTable, removedCells, dimensionTree, cube) {\n\t\tSnowflakeBuilder.travers(cellTable, dimensionTree, [SnowflakeBuilder.removeMembers.bind(this, cube, dimensionTree), SnowflakeBuilder.restoreCell]);\n\t}\n\n}\n","import Member from './Member.js'\nimport {DEFAULT_MEMBER_ID_PROP, DEFAULT_TEMPLATE_FOREIGN_KEY} from './const.js'\nimport SnowflakeBuilder from \"./SnowflakeBuilder.js\";\n\n/**\n * Dimension is a dimension of a cube. A dimension is a primary organizer of measure and attribute information in a cube\n * A dimension will contain some members organized in some hierarchy or hierarchies containing levels.\n * */\nexport default class DimensionTable {\n\tconstructor({ dimension, foreignKey = DimensionTable.genericId(dimension), primaryKey = DEFAULT_MEMBER_ID_PROP, keyProps, otherProps = [], members = [], defaultMemberOptions = {}}) {\n\t\tif (!dimension || !keyProps) {\n\t\t\tthrow Error('Bad definition DimensionTable, params \\\"dimension\\\" and \\\"keyProps\\\" is required');\n\t\t}\n\t\tif (Object.keys(defaultMemberOptions).indexOf(primaryKey) !== -1) {\n\t\t\tthrow Error('Bad definition DimensionTable, \\\"defaultMemberOptions\\\" must not contain a \\\"primaryKey\\\" property');\n\t\t}\n\t\t/** Name of the dimension */\n\t\tthis.dimension = dimension;\n\t\t/** id name */\n\t\tthis.foreignKey = foreignKey;\n\t\t/** id name */\n\t\tthis.primaryKey = primaryKey;\n\t\t/** List of key names properties of the table belonging to the current dimension */\n\t\tthis.keyProps = [].concat(keyProps);\n\t\t/** List of additional names properties of the table belonging to the current dimension */\n\t\tthis.otherProps = [].concat(otherProps);\n\t\t/** member list */\n\t\tthis.members = members.map(memberData => {\n\t\t\treturn new Member(memberData, this.primaryKey)\n\t\t});\n\t\t/** member default property options */\n\t\tthis.defaultMemberOptions = {...defaultMemberOptions};\n\t}\n\t/**\n\t *\n\t * */\n\tsetMemberList(members) {\n\t\t[].splice.apply(this.members, [0, this.members.length].concat(members))\n\t}\n\t/**\n\t *\n\t * */\n\tclearMemberList() {\n\t\tthis.members = [];\n\t}\n\tgetMemberPrimaryKey(member) {\n\t\treturn member[this.primaryKey]\n\t}\n\tgetMemberForeignKey(member) {\n\t\treturn member[this.foreignKey]\n\t}\n\t/**\n\t * @param {Member} member\n\t * */\n\taddMember(member) {\n\t\tif (this.members.indexOf(member) === -1) {\n\t\t\tthis.members.push(member)\n\t\t} else {\n\t\t\tconsole.log('boo')\n\t\t}\n\t}\n\t/**\n\t * @public\n\t * @param {object} memberOptions\n\t * @param {[]} linkProps\n\t * */\n\tcreateMember(memberOptions = {}, linkProps) {\n\t\t// todo тут нужна проверка на то, что все данные для члена измерения присутствуют\n\t\tconst memberData = {...this.defaultMemberOptions, ...memberOptions};\n\t\tconst { keyProps, otherProps, members, primaryKey } = this;\n\t\tconst keys = keyProps.concat(linkProps).concat(otherProps);\n\t\tconst id = DimensionTable.reduceId(members, primaryKey);\n\t\tconst member = SnowflakeBuilder.createInputMember(id, keys, memberData, primaryKey);// todo убрать отсюда\n\t\tthis.addMember(member);\n\t\treturn member;\n\t}\n\t/**\n\t * @public\n\t * Method of generating a unique identifier within the selected space\n\t * */\n\tstatic reduceId(members, primaryKey) {\n\t\tif (members.length) {\n\t\t\treturn members.reduce((acc, curValue) => {\n\t\t\t\treturn acc[primaryKey] > curValue[primaryKey] ? acc : curValue;\n\t\t\t}, 0)[primaryKey] + 1\n\t\t} else {\n\t\t\treturn 1;\n\t\t}\n\t}\n\t/**\n\t * @public\n\t * A way to create a name for a property in which a unique identifier will be stored\n\t * */\n\tstatic genericId(dimension) {\n\t\treturn DEFAULT_TEMPLATE_FOREIGN_KEY.replace('%s', dimension);\n\t}\n\tsetMemberId(member, id) {\n\t\tmember[this.primaryKey] = id;\n\t}\n\tdeleteMemberId(member) {\n\t\tdelete member[this.primaryKey]\n\t}\n\t/**\n\t *\n\t * */\n\tremoveMember(member) {\n\t\tconst index = this.members.indexOf(member);\n\t\tif (index === -1) {\n\t\t\tthrow new Error('represented member was not found', member);\n\t\t}\n\t\tthis.members.splice(index, 1);\n\t}\n\tstatic createDimensionTable(dimensionTable) {\n\t\treturn new DimensionTable(dimensionTable)\n\t}\n}\n","/**\n * Tree traversing https://en.wikipedia.org/wiki/Tree_traversal\n * @class Tree\n * @abstract class cannot be instantiated with new\n * */\nexport default class Tree {\n\t/**\n\t * @public\n\t * @abstract\n\t * @return {Object}\n\t * */\n\tgetTreeValue() {\n\t\tthrow 'abstract method'\n\t}\n\t/**\n\t * @public\n\t * @abstract\n\t * @return {Tree|null}\n\t * */\n\tgetParentTree() {\n\t\tthrow 'abstract method'\n\t}\n\t/**\n\t * @public\n\t * @abstract\n\t * @return {Tree[]}\n\t * */\n\tgetChildTrees() {\n\t\tthrow 'abstract method'\n\t}\n\t/**\n\t * @public\n\t * @return {boolean}\n\t * */\n\tisExternal() {\n\t\treturn !this.getChildTrees().length;\n\t}\n\t/**\n\t * @public\n\t * @return {boolean}\n\t * */\n\tisRoot() {\n\t\treturn this.getParentTree() === null;\n\t}\n\t/**\n\t * @public\n\t * Get root for that tree\n\t * @return {Tree}\n\t * */\n\tgetRoot() {\n\t\tlet root = this;\n\t\tthis.traceUpOrder((tracedTreeValue, tracedTree) => {\n\t\t\tif (tracedTree.isRoot()) {\n\t\t\t\troot = tracedTree;\n\t\t\t}\n\t\t});\n\t\treturn root;\n\t}\n\t/**\n\t * @public\n\t * A walk to root from current Tree, the current Tree and root entered to the chain\n\t * @param {function} callback\n\t * */\n\ttraceUpOrder(callback) {\n\t\tconst tree = this;\n\t\tconst parentTree = tree.getParentTree();\n\t\tconst treeValue = tree.getTreeValue();\n\t\tcallback(treeValue, tree);\n\t\tif (parentTree !== null) {\n\t\t\tparentTree.traceUpOrder(callback);\n\t\t}\n\t}\n\t/**\n\t * @public\n\t * A walk in which the children are traversed before their respective parents are traversed\n\t * @param {function} callback\n\t * */\n\ttracePostOrder(callback) {\n\t\tconst tree = this;\n\t\tconst childTrees = tree.getChildTrees();\n\t\tconst treeValue = tree.getTreeValue();\n\t\tif (childTrees.length) {\n\t\t\tchildTrees.forEach(childTree => {\n\t\t\t\tchildTree.tracePostOrder(callback);\n\t\t\t});\n\t\t}\n\t\tcallback(treeValue, tree);\n\t}\n\t/**\n\t * @public\n\t *  A walk in which each parent tree is traversed before its children is called a pre-order walk\n\t * */\n\ttracePreOrder(callback) {\n\t\tconst tree = this;\n\t\tconst childTrees = tree.getChildTrees();\n\t\tconst treeValue = tree.getTreeValue();\n\t\tcallback(treeValue, tree);\n\t\tif (childTrees.length) {\n\t\t\tchildTrees.forEach(childTree => {\n\t\t\t\tchildTree.tracePreOrder(callback);\n\t\t\t});\n\t\t}\n\t}\n}\n","import DimensionTable from './DimensionTable.js'\nimport Tree from './Tree.js'\nimport {DimensionException} from './errors.js'\n/**\n * It defines the relationship of generalization and specialization (roll-up/drill-down)\n * @throws {DimensionException}\n * */\nexport default class DimensionTree extends Tree {\n\tconstructor(dimensionTree) {\n\t\tsuper();\n\n\t\tconst {dimensionTable, level = [], parentNode = null} = dimensionTree;\n\t\t\n\t\tObject.defineProperties(this, {\n\t\t\tdimensionTable: {\n\t\t\t\t/**\n\t\t\t\t * @property\n\t\t\t\t * @name DimensionTree#dimensionTable\n\t\t\t\t * */\n\t\t\t\tvalue: DimensionTable.createDimensionTable(dimensionTable),\n\t\t\t\teditable: false,\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\tparentNode: {\n\t\t\t\t/**\n\t\t\t\t * @property {DimensionTree|null}\n\t\t\t\t * @name DimensionTree#parentNode\n\t\t\t\t * */\n\t\t\t\tvalue: parentNode,\n\t\t\t\tenumerable: false,\n\t\t\t\teditable: false\n\t\t\t},\n\t\t\tlevel: {\n\t\t\t\t/**\n\t\t\t\t * @property {DimensionTree[]}\n\t\t\t\t * @name DimensionTree#level\n\t\t\t\t * */\n\t\t\t\tvalue: level.map(dimensionTreeData => {\n\t\t\t\t\treturn new DimensionTree({ ...dimensionTreeData, parentNode: this })\n\t\t\t\t}),\n\t\t\t\tenumerable: true,\n\t\t\t\teditable: false\n\t\t\t}\n\t\t});\n\t\tthis.validateDimensions();\n\t}\n\tvalidateDimensions(){\n\t\tconst dimensions = [];\n\t\tthis.tracePostOrder(tracedDimensionTreeValue => {\n\t\t\tconst {dimension} = tracedDimensionTreeValue;\n\t\t\tif (dimensions.indexOf(dimension) === -1){\n\t\t\t\tdimensions.push(dimension)\n\t\t\t} else {\n\t\t\t\tthrow new DimensionException();\n\t\t\t}\n\t\t})\n\t}\n\tstatic createDimensionTree(dimensionTreeData) {\n\t\t// todo add validation\n\t\treturn new DimensionTree(dimensionTreeData);\n\t}\n\tstatic createProxyDimensionTree(dimensionTree){\n\t\tconst newDimensionTree = dimensionTree.cloneDimensionTreeWithoutMembers();\n\t\tdimensionTree.tracePostOrder(tracedTreeValue => {\n\t\t\tconst { dimension: tracedDimension, members } = tracedTreeValue;\n\t\t\t\n\t\t\tnewDimensionTree\n\t\t\t\t.getDimensionTreeByDimension(tracedDimension)\n\t\t\t\t.getTreeValue()\n\t\t\t\t.setMemberList(members);\n\t\t});\n\t\treturn newDimensionTree;\n\t}\n\t/**\n\t * @public\n\t * @return {DimensionTable}\n\t * */\n\tgetTreeValue() {\n\t\treturn this.dimensionTable;\n\t}\n\t/**\n\t * @public\n\t * @return {DimensionTree|null}\n\t * */\n\tgetParentTree() {\n\t\treturn this.parentNode;\n\t}\n\t/**\n\t * @public\n\t * @return {DimensionTree[]}\n\t * */\n\tgetChildTrees() {\n\t\treturn this.level;\n\t}\n\t/**\n\t * @public\n\t * @param {string} dimension\n\t * @return {DimensionTree|undefined}\n\t * */\n\tgetDimensionTreeByDimension(dimension) {\n\t\tconst root = this.getRoot();\n\t\tlet search = void 0;\n\t\troot.tracePostOrder((dimensionTreeValue, dimensionTree) => {\n\t\t\tif (dimensionTreeValue.dimension === dimension){\n\t\t\t\tsearch = dimensionTree;\n\t\t\t}\n\t\t});\n\t\treturn search;\n\t}\n\t/**\n\t * @public\n\t * @param {Member} member\n\t * @return {DimensionTree|undefined}\n\t * */\n\tcreateProjectionOntoMember(member) {\n\t\t// 1 create copy of hierarchy with empty members\n\t\tconst newDimensionTreeByMember = this.cloneDimensionTreeWithoutMembers();\n\n\t\tthis.projectDrillDown(newDimensionTreeByMember, member);\n\t\tthis.projectDrillUp(newDimensionTreeByMember, member);\n\n\t\treturn newDimensionTreeByMember;\n\t}\n\tprojectDrillDown(dimensionTree, member){\n\t\tthis.projectDrill(dimensionTree, member, \"traceUpOrder\", \"drillDownDimensionMembers\")\n\t}\n\tprojectDrillUp(dimensionTree, member){\n\t\tthis.projectDrill(dimensionTree, member, \"tracePreOrder\", \"drillUpDimensionMembers\")\n\t}\n\tprojectDrill(dimensionTree, member, traceMethodName, method){\n\t\tlet lastTracedMembers;\n\t\tlet lastTracedDimensionTree;\n\t\tthis[traceMethodName]((tracedDimensionTreeValue, tracedDimensionTree) => {\n\t\t\tconst { dimension: tracedDimension } = tracedDimensionTreeValue;\n\n\t\t\tconst drillMembers = tracedDimensionTree == this\n\t\t\t\t? [member]\n\t\t\t\t: lastTracedDimensionTree[method](lastTracedMembers);\n\n\t\t\tdimensionTree\n\t\t\t\t.getDimensionTreeByDimension(tracedDimension)\n\t\t\t\t.getTreeValue()\n\t\t\t\t.setMemberList(drillMembers);\n\n\t\t\tlastTracedMembers = drillMembers;\n\t\t\tlastTracedDimensionTree = tracedDimensionTree;\n\t\t});\n\t}\n\tcloneDimensionTreeWithoutMembers(){\n\t\t// todo new members must be not created here\n\t\tconst clone = new DimensionTree(this.getRoot());\n\t\tclone.tracePostOrder(dimensionTreeValue => {\n\t\t\tdimensionTreeValue.clearMemberList();\n\t\t});\n\t\treturn clone;\n\t}\n\t/**\n\t * @public\n\t * @param {Member} member\n\t * */\n\tremoveProjectionOntoMember(member) {\n\t\t// 1 get projection\n\t\tconst projectionDimensionTree = this.cloneDimensionTreeWithoutMembers();\n\t\tthis.projectDrillDown(projectionDimensionTree, member);\n\n\t\t// 2 subtract projection\n\t\tthis.subtractDimensionTree(projectionDimensionTree);\n\t\t// 3 return first level members of projection\n\t\tconst endToBeRemovedMember = {};\n\n\t\tconst {\n\t\t\tdimension: dimensionProjection,\n\t\t\tmembers: membersProjection\n\t\t} = projectionDimensionTree.getRoot().getTreeValue();\n\n\t\tendToBeRemovedMember[dimensionProjection] = membersProjection;\n\n\t\treturn endToBeRemovedMember;\n\t}\n\t/**\n\t * @private\n\t * @param {DimensionTree} dimensionTree\n\t * */\n\tsubtractDimensionTree(dimensionTree) {\n\t\t// remove intersection\n\t\tconst toBeRemovedSpace = {};\n\n\t\tdimensionTree.tracePostOrder(dimensionTreeValue => {\n\t\t\tconst {dimension, members} = dimensionTreeValue;\n\t\t\ttoBeRemovedSpace[dimension] = members;\n\t\t});\n\n\t\tconst memberList = this.getTreeValue().members;\n\n\t\t// travers down\n\t\tif (memberList.length === 1) {\n\t\t\tthis.tracePreOrder((tracedDimensionTable, tracedDimensionTree) => {\n\t\t\t\tconst {members: childMembers, dimension: childDimension} = tracedDimensionTable;\n\t\t\t\ttoBeRemovedSpace[childDimension] = childMembers;\n\t\t\t})\n\t\t}\n\n\t\t// remove removal space\n\t\tObject.keys(toBeRemovedSpace).forEach(dimension => {\n\t\t\tconst currentDimensionTree = this.getDimensionTreeByDimension(dimension);\n\t\t\tconst dimensionTable = currentDimensionTree.getTreeValue();\n\t\t\ttoBeRemovedSpace[dimension].forEach(member => {\n\t\t\t\tdimensionTable.removeMember(member);\n\t\t\t})\n\t\t});\n\t}\n\tunionDimensionTree(dimensionTree){\n\t\tconst toBeAddedSpace = {};\n\t\tdimensionTree.tracePostOrder(dimensionTreeValue => {\n\t\t\tconst {dimension, members} = dimensionTreeValue;\n\t\t\ttoBeAddedSpace[dimension] = members;\n\t\t});\n\n\t\tObject.keys(toBeAddedSpace).forEach(dimension => {\n\t\t\tconst currentDimensionTree = this.getDimensionTreeByDimension(dimension);\n\t\t\tconst dimensionTable = currentDimensionTree.getTreeValue();\n\t\t\ttoBeAddedSpace[dimension].forEach(member => {\n\t\t\t\tdimensionTable.addMember(member);\n\t\t\t})\n\t\t});\n\t}\n\t/**\n\t * @public\n\t * @param {Member[]} members\n\t * @return {Member[]}\n\t * */\n\tdrillDownDimensionMembers(members = this.getTreeValue().members) {\n\t\tif (this.isRoot()) {\n\t\t\treturn members;\n\t\t}\n\t\tconst parentTree = this.getParentTree();\n\t\tconst parentDimensionTable = parentTree.getTreeValue();\n\t\tconst dimensionTable = this.getTreeValue();\n\t\tconst { members: parentMembers } = parentDimensionTable;\n\t\tconst drillMembers = [];\n\t\tmembers.forEach(member => {\n\t\t\tparentMembers.forEach(parentMember => {\n\t\t\t\tif (dimensionTable.getMemberForeignKey(parentMember) === parentDimensionTable.getMemberPrimaryKey(member)) {\n\t\t\t\t\tif (drillMembers.indexOf(parentMember) === -1) {\n\t\t\t\t\t\tdrillMembers.push(parentMember)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t});\n\t\treturn drillMembers;\n\t}\n\t/**\n\t * @public\n\t * @this {DimensionTree}\n\t * @param {Member[]} members\n\t * @return {Member[]}\n\t * */\n\tdrillUpDimensionMembers(members = this.getTreeValue().members) {\n\t\tif (this.isExternal()) {\n\t\t\treturn members;\n\t\t}\n\t\tconst childTrees = this.getChildTrees();\n\t\tconst childTree = childTrees[0]; // todo not for one child always\n\t\tconst childDimensionTable = childTree.getTreeValue();\n\t\tconst { members: childMembers } = childDimensionTable;\n\t\tconst drillMembers = [];\n\t\tmembers.forEach(member => {\n\t\t\tchildMembers.forEach(childMember => {\n\t\t\t\tif (childDimensionTable.getMemberForeignKey(member) === childDimensionTable.getMemberPrimaryKey(childMember)) {\n\t\t\t\t\tif (drillMembers.indexOf(childMember) === -1) {\n\t\t\t\t\t\tdrillMembers.push(childMember)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t});\n\t\treturn drillMembers;\n\t}\n\t/**\n\t * @public\n\t * @param {object?} memberOptions\n\t * */\n\tcreateMember(memberOptions = {}) {\n\t\tconst dimensionTable = this.getTreeValue();\n\t\tconst childIdAttributes = this.getChildTrees().map(dimensionTree =>\n\t\t\tdimensionTree.getTreeValue().foreignKey\n\t\t);\n\t\tconst linkProps = [];\n\t\tchildIdAttributes.forEach(foreignKey => {\n\t\t\tlinkProps.push(foreignKey)\n\t\t});\n\t\treturn dimensionTable.createMember(memberOptions, linkProps)\n\t}\n}\n","import DimensionTree from './DimensionTree.js'\n\n/**\n * The elements of a dimension can be organized as a hierarchy\n * Hierarchy is a dimension hierarchy of a cube\n * */\nexport default class DimensionHierarchy {\n\tconstructor({ dimensionTree, activeDimension, hierarchy}) {\n\t\tif (!hierarchy) {\n\t\t\tthrow Error('attribute \"hierarchy\" must be defined')\n\t\t}\n\t\tthis.dimensionTree = dimensionTree instanceof DimensionTree\n\t\t\t? dimensionTree\n\t\t\t: DimensionTree.createDimensionTree(dimensionTree);\n\t\tthis.activeDimension = activeDimension || this.dimensionTree.getTreeValue().dimension;\n\t\tthis.hierarchy = hierarchy;\n\t}\n\tgetDimensionTree() {\n\t\treturn this.dimensionTree;\n\t}\n\thasDimension(dimension) {\n\t\treturn !!this.dimensionTree.getDimensionTreeByDimension(dimension);\n\t}\n\tgetActiveDimension() {\n\t\treturn this.activeDimension;\n\t}\n\tsetActiveDimension(activeDimension) {\n\t\tthis.activeDimension = activeDimension;\n\t}\n\tgetHierarchy() {\n\t\treturn this.hierarchy;\n\t}\n\tstatic createDimensionHierarchy(dimensionHierarchy) {\n\t\treturn new DimensionHierarchy(dimensionHierarchy)\n\t}\n}\n","/**\n * The cell is identified by a tuple\n * tuples can uniquely identify every cell in the cube\n * Tuple is an ordered collection of one or more members from different dimensions\n * */\nexport default class Tuple {\n\tconstructor(options) {\n\t\tObject.assign(this, options)\n\t}\n}\n","export default class Space {\n\t/**\n\t *\n\t * */\n\tstatic union() {\n\t\tconst newSpace = {};\n\t\tconst arg = [...arguments];\n\t\targ.forEach(space => {\n\t\t\tSpace.add(newSpace, space);\n\t\t});\n\t\treturn newSpace;\n\t}\n\t/**\n\t *\n\t * */\n\tstatic add(targetSpace, otherSpace) {\n\t\tObject.keys(otherSpace).forEach(key => {\n\t\t\tif (!targetSpace[key]) {\n\t\t\t\ttargetSpace[key] = [];\n\t\t\t}\n\t\t\tArray.prototype.push.apply(targetSpace[key], otherSpace[key])\n\t\t})\n\t}\n}\n","const toString = Object.prototype.toString\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction getTag(value) {\n\tif (value == null) {\n\t\treturn value === undefined ? '[object Undefined]' : '[object Null]'\n\t}\n\treturn toString.call(value)\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * isObjectLike({})\n * // => true\n *\n * isObjectLike([1, 2, 3])\n * // => true\n *\n * isObjectLike(Function)\n * // => false\n *\n * isObjectLike(null)\n * // => false\n */\nfunction isObjectLike(value) {\n\treturn typeof value == 'object' && value !== null\n}\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1\n * }\n *\n * isPlainObject(new Foo)\n * // => false\n *\n * isPlainObject([1, 2, 3])\n * // => false\n *\n * isPlainObject({ 'x': 0, 'y': 0 })\n * // => true\n *\n * isPlainObject(Object.create(null))\n * // => true\n */\nfunction isPlainObject(value) {\n\tif (!isObjectLike(value) || getTag(value) != '[object Object]') {\n\t\treturn false\n\t}\n\tif (Object.getPrototypeOf(value) === null) {\n\t\treturn true\n\t}\n\tlet proto = value\n\twhile (Object.getPrototypeOf(proto) !== null) {\n\t\tproto = Object.getPrototypeOf(proto)\n\t}\n\treturn Object.getPrototypeOf(value) === proto\n}\n\nexport default isPlainObject","import EmptyCell from './EmptyCell.js'\nimport Member from './Member.js'\nimport DimensionTree from './DimensionTree.js'\nimport DimensionHierarchy from './DimensionHierarchy.js'\nimport DimensionTable from './DimensionTable.js'\nimport {\n\tInsufficientRollupData,\n} from './errors.js';\nimport SnowflakeBuilder from './SnowflakeBuilder.js'\nimport console from './console.js'\nimport Tuple from './Tuple.js'\nimport Space from './Space.js'\nimport Cell from './Cell.js'\nimport { DEFAULT_FACT_ID_PROP } from './const.js'\nimport isPlainObject from \"./isPlainObject.js\"\nimport {NotFoundFactId} from \"./errors.js\";\n\n/**\n * It a means to retrieve data\n *\n * Base class for normalizing a denormalized data array\n * and analyzing query according to a given scheme\n *\n * */\nclass Cube {\n\t/**\n\t * @param {object | Cube} cube\n\t * @throw {TypeError}\n\t * */\n\tconstructor(cube = {}) {\n\t\tif (!(isPlainObject(cube) || cube instanceof Cube)){\n\t\t\tthrow TypeError('The argument must be plain object or instance of Cube')\n\t\t}\n\t\tlet {\n\t\t\tdimensionHierarchies = [],\n\t\t\tcellTable = [],\n\t\t\tdefaultFactOptions = {},\n\t\t\tfactPrimaryKey = DEFAULT_FACT_ID_PROP\n\t\t} = cube;\n\n\t\tthis.defaultFactOptions = defaultFactOptions;\n\t\tthis.factPrimaryKey = factPrimaryKey;\n\n\t\tthis.dimensionHierarchies = dimensionHierarchies.map(dimensionHierarchy => {\n\t\t\t// duck\n\t\t\tif (dimensionHierarchy.hierarchy) {\n\t\t\t\tif (dimensionHierarchy instanceof DimensionHierarchy) {\n\t\t\t\t\treturn dimensionHierarchy;\n\t\t\t\t} else {\n\t\t\t\t\treturn DimensionHierarchy.createDimensionHierarchy(dimensionHierarchy);\n\t\t\t\t}\n\t\t\t} else if (dimensionHierarchy.dimensionTable) {\n\t\t\t\tif ( dimensionHierarchy instanceof DimensionTree ){\n\t\t\t\t\treturn dimensionHierarchy;\n\t\t\t\t} else {\n\t\t\t\t\treturn DimensionTree.createDimensionTree(dimensionHierarchy);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (dimensionHierarchy instanceof DimensionTable) {\n\t\t\t\t\treturn dimensionHierarchy;\n\t\t\t\t} else {\n\t\t\t\t\treturn DimensionTable.createDimensionTable(dimensionHierarchy);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tthis.cellTable = cellTable.map(cellData => {\n\t\t\tif (cellData instanceof Cell) {\n\t\t\t\treturn cellData\n\t\t\t} else {\n\t\t\t\treturn EmptyCell.isEmptyCell(cellData) ? new EmptyCell(cellData) : new Cell(cellData)\n\t\t\t}\n\t\t});\n\n\t\t// const residuals = residuals(this);\n\t\t// const count = residuals.length;\n\t\t// if (count > 0) {\n\t\t// \tconsole.warn('Fact table has residuals', residuals)\n\t\t// }\n\t}\n\t/**\n\t * is the act of picking a rectangular subset of a cube by choosing a single value\n\t * for one of its dimensions, creating a new cube with one fewer dimension.\n\t * @public\n\t * @param {string} dimension\n\t * @param {Member} member\n\t * @return {Cube}\n\t * */\n\tslice(dimension, member) {\n\t\treturn this.dice({ [dimension]: member })\n\t}\n\t/**\n\t * @public\n\t * @param {object} set\n\t * @return {Cube}\n\t * @throw {TypeError}\n\t * @throw {RangeError}\n\t * */\n\tdice(set) {\n\t\tif (!(isPlainObject(set) || set instanceof Tuple)){\n\t\t\tthrow TypeError(\"The argument must be a plain object\")\n\t\t}\n\t\t\n\t\t// always work with arrays as value\n\t\tconst toMultiset = (value) => {\n\t\t\treturn Array.isArray(value) ? value : [value];\n\t\t};\n\t\t\n\t\t// change member data to original member objects\n\t\tconst toOriginal = (membersData, dimension) => {\n\t\t\tconst dimensionTree = getDimensionTreeByDimension.call(this, dimension);\n\t\t\tconst dimensionTable = dimensionTree.getTreeValue();\n\t\t\tconst members = dimensionTable.members;\n\t\t\t//replace memberData with original members\n\t\t\tmembersData.forEach((memberData, index) => {\n\t\t\t\tlet member = members.find(member => dimensionTable.getMemberPrimaryKey(member) === dimensionTable.getMemberPrimaryKey(memberData));\n\t\t\t\tif (!member) {\n\t\t\t\t\tthrow RangeError(`Not found member by id ${dimensionTable.getMemberPrimaryKey(member)}`)\n\t\t\t\t}\n\t\t\t\tif (membersData instanceof Member){\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tmembersData[index] = member;\n\t\t\t});\n\t\t\treturn membersData;\n\t\t};\n\t\t\n\t\tconst originalMultiset = {};\n\t\tObject.keys(set).forEach((dimension) => {\n\t\t\tlet value = set[dimension];\n\t\t\tvalue = toMultiset(value);\n\t\t\tvalue = toOriginal(value, dimension);\n\t\t\toriginalMultiset[dimension] = value;\n\t\t});\n\t\t\n\t\tconst dimensions = Object.keys(originalMultiset);\n\t\t\n\t\t// 1 make one projection on to member\n\t\tconst dimensionHierarchiesLength = this.dimensionHierarchies.length;\n\t\tif (dimensions.length > dimensionHierarchiesLength) {\n\t\t\tthrow Error(`Set must have a size not more than ${dimensionHierarchiesLength} dimensions`)\n\t\t}\n\n\t\tconst projectionDimensionHierarchies = [];\n\n\t\t// for every dimension in set\n\t\tconst totalSpaces = dimensions.map(dimension => {\n\n\t\t\tlet dimensionTreeProjection;\n\t\t\tconst members = originalMultiset[dimension];\n\t\t\t// ищется его расширенная версия для каждого члена\n\t\t\tconst spacesForCells = members.map(member => {\n\n\t\t\t\tlet searchedInTree = getDimensionTreeByDimension.call(this, dimension);\n\n\t\t\t\tconst current = searchedInTree.cloneDimensionTreeWithoutMembers();\n\n\t\t\t\tsearchedInTree.projectDrillDown(current, member);\n\t\t\t\tsearchedInTree.projectDrillUp(current, member);\n\n\t\t\t\tif (dimensionTreeProjection){\n\t\t\t\t\tdimensionTreeProjection.unionDimensionTree(current)\n\t\t\t\t} else {\n\t\t\t\t\tdimensionTreeProjection = current;\n\t\t\t\t}\n\t\t\t\tconst {\n\t\t\t\t\tdimension: dimensionProjection,\n\t\t\t\t\tmembers: membersProjection\n\t\t\t\t} = dimensionTreeProjection.getRoot().getTreeValue();\n\n\t\t\t\treturn { [dimensionProjection]: membersProjection };\n\t\t\t});\n\n\t\t\tif (dimensionTreeProjection){\n\t\t\t\tprojectionDimensionHierarchies.push(dimensionTreeProjection);\n\t\t\t}\n\n\t\t\t// после чего эти расширенные версии объекдиняются\n\t\t\tconst totalSpace = Space.union(...spacesForCells);\n\n\t\t\treturn totalSpace;\n\t\t});\n\n\t\t// фильтрация продолжается\n\t\tlet filteredCellTable = this.getCells();\n\n\t\tconst cellBelongsToSpace = (cell, space) => {\n\t\t\tconst somePropOfCellNotBelongToSpace = Object.keys(space).some(dimension => {\n\t\t\t\tconst members = space[dimension];\n\t\t\t\tconst { foreignKey, primaryKey } = getDimensionTreeByDimension.call(this, dimension).getTreeValue();\n\t\t\t\tconst finded = members.find(member => {\n\t\t\t\t\treturn member[primaryKey] === cell[foreignKey]\n\t\t\t\t});\n\t\t\t\treturn !finded;\n\t\t\t});\n\t\t\treturn !somePropOfCellNotBelongToSpace;\n\t\t};\n\n\t\ttotalSpaces.forEach(space => {\n\t\t\t// и ищутся те ячейки, которые принадлежат получившейся области\n\t\t\tfilteredCellTable = filteredCellTable.filter(cell => {\n\t\t\t\treturn cellBelongsToSpace(cell, space)\n\t\t\t});\n\t\t});\n\n\t\t// 2 create new list of dimensionHierarchies\n\t\tconst newDimensionHierarchies = [];\n\t\tthis.dimensionHierarchies.forEach(originalDimensionHierarchy => {\n\t\t\tlet finded = false;\n\t\t\tprojectionDimensionHierarchies.forEach(projectionDimensionHierarchy => {\n\t\t\t\tif (originalDimensionHierarchy.getTreeValue().dimension === projectionDimensionHierarchy.getTreeValue().dimension) {\n\t\t\t\t\tnewDimensionHierarchies.push(projectionDimensionHierarchy);\n\t\t\t\t\tfinded = true;\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (!finded) {\n\t\t\t\tconst { members, dimension } = originalDimensionHierarchy.getTreeValue();\n\t\t\t\tconst projectionDimensionHierarchy = DimensionTree.createProxyDimensionTree(originalDimensionHierarchy);\n\t\t\t\tmembers.forEach(member => {\n\t\t\t\t\tlet memberBelongToCells = false;\n\t\t\t\t\tfilteredCellTable.forEach(filteredCell => {\n\t\t\t\t\t\tif (cellBelongsToSpace(filteredCell, { [dimension]: [member] })) {\n\t\t\t\t\t\t\tmemberBelongToCells = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tif (!memberBelongToCells) {\n\t\t\t\t\t\tlet has = projectionDimensionHierarchy.getTreeValue().members.indexOf(member) !== -1;\n\t\t\t\t\t\tif (has) {\n\t\t\t\t\t\t\tprojectionDimensionHierarchy.removeProjectionOntoMember(member)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tnewDimensionHierarchies.push(projectionDimensionHierarchy);\n\t\t\t}\n\t\t});\n\n\t\treturn new SubCube({\n\t\t\tcellTable: filteredCellTable,\n\t\t\tdimensionHierarchies: newDimensionHierarchies,\n\t\t\toriginalCube: this.originalCube || this,\n\t\t\tpreviousCube: this\n\t\t})\n\t}\n\t/**\n\t * The cube introduces generalization relations\n\t * it's operations on dimension hierarchies\n\t * @public\n\t * @param {string} hierarchy\n\t * @param {string} targetDimension\n\t * @return {Cube}\n\t * */\n\tdrillUp(hierarchy, targetDimension) {\n\t\tconst currentHierarchy = getHierarchy.call(this, hierarchy);\n\t\tif (currentHierarchy && currentHierarchy.hasDimension(targetDimension)) {\n\t\t\tcurrentHierarchy.setActiveDimension(targetDimension);\n\t\t}\n\t\treturn this;\n\t}\n\t/**\n\t * The cube introduced specialization relations\n\t * it's operations on dimension hierarchies\n\t * @public\n\t * @param {string} hierarchy\n\t * @param {string} targetDimension\n\t * @return {Cube}\n\t * */\n\tdrillDown(hierarchy, targetDimension) {\n\t\tconst currentHierarchy = getHierarchy.call(this, hierarchy);\n\t\tif (currentHierarchy && currentHierarchy.hasDimension(targetDimension)) {\n\t\t\tcurrentHierarchy.setActiveDimension(targetDimension);\n\t\t}\n\t\treturn this;\n\t}\n\t/**\n\t * @public\n\t * @return {Fact[]} returns facts\n\t * */\n\tgetFacts() {\n\t\treturn denormalize.call(this, this.getCells());\n\t}\n\t/**\n\t * @public\n\t * @param {Object[]} facts\n\t * @throw {TypeError}\n\t * @return {Cube}\n\t * */\n\taddFacts(facts) {\n\t\tif (!Array.isArray(facts)){\n\t\t\tthrow TypeError('The argument must be instance of Array')\n\t\t}\n\t\tfacts.forEach(validateFactData.bind(null, this.factPrimaryKey));\n\t\tconst cells = facts.map(fact => new Cell(fact));\n\t\t[].push.apply(this.getCells(), cells);\n\t\tconst factTable = this.getFacts();\n\t\tSnowflakeBuilder.anotherBuild(factTable, cells, getDimensionTrees.call(this), this.getCells(), this.factPrimaryKey);\n\t\treturn this;\n\t}\n\t/**\n\t * @public\n\t * @param {Object[]} facts\n\t * @throw {TypeError}\n\t * */\n\tremoveFacts(facts) {\n\t\tif (!Array.isArray(facts)){\n\t\t\tthrow TypeError('The argument must be instance of Array')\n\t\t}\n\t\tconst cellTable = this.getCells();\n\t\tconst factPrimaryKey = this.factPrimaryKey;\n\t\tconst removedCells = facts.map(fact => {\n\t\t\treturn cellTable.find(cell => cell[factPrimaryKey] === fact[factPrimaryKey])\n\t\t});\n\t\tthis.removeCells(removedCells);\n\t}\n\t/**\n\t * @public\n\t * @return {Cell[]}\n\t * */\n\tgetCells() {\n\t\treturn this.cellTable;\n\t}\n\t/**\n\t * @public\n\t * @param {Cell[]} cells\n\t * @throw {TypeError}\n\t * */\n\tremoveCells(cells) {\n\t\tif (!Array.isArray(cells)){\n\t\t\tthrow TypeError('The argument must be instance of Array')\n\t\t}\n\t\tcells.forEach((cell) => {\n\t\t\tif (!(cell instanceof Cell)){\n\t\t\t\tthrow TypeError('The list of cells must contain only instances of Cell and EmptyCell')\n\t\t\t}\n\t\t});\n\t\tSnowflakeBuilder.destroy(this.getCells(), cells, this.dimensionHierarchies, this);\n\t}\n\t/**\n\t * @public\n\t * @param {string} dimension - dimension from which the member will be found\n\t * @return {Member[]} returns members\n\t * @throw {TypeError}\n\t * */\n\tgetDimensionMembers(dimension) {\n\t\tif (!(typeof dimension === 'string')){\n\t\t\tthrow TypeError('The first argument must be string')\n\t\t}\n\t\tconst dimensionTree = getDimensionTreeByDimension.call(this, dimension);\n\t\treturn dimensionTree.getTreeValue().members;\n\t}\n\t/**\n\t * @public\n\t * @param {string} dimension - dimension in which the member is created\n\t * @param {object?} customMemberOptions - properties for the created member\n\t * @param {object?} rollupCoordinatesData\n\t * @param {object?} drillDownCoordinatesOptions\n\t * @param {object?} cellData\n\t * @throw {InsufficientRollupData}\n\t * */\n\taddDimensionMember(dimension, customMemberOptions = {}, rollupCoordinatesData = {}, drillDownCoordinatesOptions = {}, cellData = {}) {\n\t\tif (!(typeof dimension === 'string')){\n\t\t\tthrow TypeError('The first argument must be instance of string')\n\t\t}\n\t\tif (!(\n\t\t\tisPlainObject(customMemberOptions)\n\t\t\t&& isPlainObject(rollupCoordinatesData)\n\t\t\t&& isPlainObject(drillDownCoordinatesOptions)\n\t\t\t&& isPlainObject(cellData)\n\t\t)){\n\t\t\tthrow TypeError('The arguments after the first must be plain objects')\n\t\t}\n\t\t\n\t\t// todo №1, а если члены с такими ключами уже существуют, нужнен варнинг, потому что, после десериализации член исчезнет, если не будут изменены значения ключевых полей\n\t\tconst rollupCoordinates = {};\n\t\tObject.keys(rollupCoordinatesData).forEach(dimension => {\n\t\t\tconst memberData = rollupCoordinatesData[dimension];\n\t\t\tconst memberList = this.getDimensionMembers(dimension);\n\t\t\tconst dimensionTable = getDimensionTreeByDimension.call(this, dimension).getTreeValue();\n\t\t\tconst { primaryKey } = dimensionTable;\n\t\t\tconst id = memberData[primaryKey];\n\t\t\tconst find = memberList.find(member => {\n\t\t\t\treturn id === dimensionTable.getMemberPrimaryKey(member)\n\t\t\t});\n\t\t\tif (!find) {\n\t\t\t\tthrow new InsufficientRollupData(dimension, id)\n\t\t\t} else {\n\t\t\t\trollupCoordinates[dimension] = find;\n\t\t\t}\n\t\t});\n\t\tconst dimensionTree = getDimensionTreeByDimension.call(this, dimension);\n\t\tconst childDimensionTrees = dimensionTree.getChildTrees();\n\t\tconst dimensionTable = dimensionTree.getTreeValue();\n\t\tconst { foreignKey } = dimensionTable;\n\t\tconst foreignKeysMemberData = {};\n\t\tchildDimensionTrees.forEach(childDimensionTree => {\n\t\t\tconst dimensionTable = childDimensionTree.getTreeValue();\n\t\t\tconst { dimension, foreignKey, primaryKey } = dimensionTable;\n\t\t\tconst member = rollupCoordinatesData[dimension];\n\t\t\tif (!member) {\n\t\t\t\tthrow new InsufficientRollupData(dimension)\n\t\t\t} else {\n\t\t\t\tforeignKeysMemberData[foreignKey] = member[primaryKey];\n\t\t\t}\n\t\t});\n\t\t// todo проверить, что customMemberOptions не содержит внешних ключей\n\t\tconst memberOptions = Object.assign({}, customMemberOptions, foreignKeysMemberData);\n\n\t\tlet saveMember = dimensionTree.createMember(memberOptions);\n\t\tlet saveIdAttribute = foreignKey;\n\t\tdimensionTree.traceUpOrder((tracedDimensionTable, tracedDimensionTree) => {\n\t\t\tif (dimensionTree !== tracedDimensionTree) {\n\t\t\t\tconst { dimension: parentDimension, foreignKey: parentIdAttribute } = tracedDimensionTable;\n\t\t\t\tconst drillDownCoordinatesData = { [ saveIdAttribute]: dimensionTable.getMemberPrimaryKey(saveMember) };\n\t\t\t\tObject.assign(drillDownCoordinatesData, drillDownCoordinatesOptions[parentDimension]);\n\t\t\t\tsaveMember = tracedDimensionTree.createMember(drillDownCoordinatesData);\n\t\t\t\tsaveIdAttribute = parentIdAttribute;\n\t\t\t}\n\t\t});\n\t\tthis.fillEmptyCells(cellData);\n\t}\n\t/**\n\t * @public\n\t * @param {string} dimension - dimension from which the member will be removed\n\t * @param {Member} member - the member will be removed\n\t * throw {TypeError}\n\t * */\n\tremoveDimensionMember(dimension, member) {\n\t\tif (!(typeof dimension === 'string')){\n\t\t\tthrow TypeError('The first argument must be instance of string')\n\t\t}\n\t\tif (!(member instanceof Member)){\n\t\t\tthrow TypeError('The second argument must be instance of Member')\n\t\t}\n\t\tconst dimensionTree = getDimensionTreeByDimension.call(this, dimension);\n\t\tconst endToBeRemoved = dimensionTree.removeProjectionOntoMember(member);\n\t\tconst cellTable = this.getCells();\n\t\tconst getRemoveMeasures = (dimension, members) => {\n\t\t\tconst removedCells = [];\n\t\t\tconst dimensionTable = dimensionTree.getDimensionTreeByDimension(dimension).getTreeValue();\n\t\t\tconst foreignKey = dimensionTable.foreignKey;\n\n\t\t\t// todo mapFilter похоже\n\t\t\tcellTable.forEach(cell => {\n\t\t\t\tmembers.forEach(member => {\n\t\t\t\t\tif (cell[foreignKey] == dimensionTable.getMemberPrimaryKey(member)) {\n\t\t\t\t\t\tremovedCells.push(cell)\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t});\n\t\t\treturn removedCells;\n\t\t};\n\t\tObject.keys(endToBeRemoved).map(dimension => {\n\t\t\tconst removedMeasures = getRemoveMeasures(dimension, endToBeRemoved[dimension]);\n\t\t\tremovedMeasures.forEach(cell => {\n\t\t\t\tconst index = cellTable.indexOf(cell);\n\t\t\t\tif (index !== -1) {\n\t\t\t\t\tcellTable.splice(index, 1);\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\t}\n\t/**\n\t * @public\n\t * @param {object|DimensionTree} dimensionHierarchy\n\t * @throw {TypeError}\n\t * */\n\taddDimensionHierarchy(dimensionHierarchy) {\n\t\tconst dimensionTree = DimensionTree.createDimensionTree(dimensionHierarchy);\n\t\tthis.dimensionHierarchies.push(\n\t\t\tdimensionTree\n\t\t);\n\t\tSnowflakeBuilder.anotherBuildOne(dimensionTree, this.getCells(), this.getCells(), this.getCells(), this.factPrimaryKey);\n\t}\n\t/**\n\t * @public\n\t * @param {DimensionTree} dimensionHierarchy\n\t * */\n\tremoveDimensionHierarchy(dimensionHierarchy) {\n\t\tif (!(dimensionHierarchy instanceof DimensionTree)){\n\t\t\tthrow TypeError('The argument must be instance of DimensionTree')\n\t\t}\n\t\t// first remove members\n\t\tSnowflakeBuilder.destroyDimensionTree(this.getCells(), this.getCells(), dimensionHierarchy, this);\n\t\t// then target dimension hierarchy\n\t\tthis.dimensionHierarchies.splice(this.dimensionHierarchies.indexOf(dimensionHierarchy), 1);\n\t}\n\t/**\n\t * @public\n\t * @return {EmptyCell[]}\n\t * @throw {TypeError}\n\t * */\n\tcreateEmptyCells(cellOptions = {}) {\n\t\tif (!isPlainObject(cellOptions)){\n\t\t\tthrow TypeError('Cell option argument must be a pure object')\n\t\t}\n\t\tconst emptyCells = [];\n\t\tconst tuples = Cube.cartesian(this);\n\t\ttuples.forEach(tuple => {\n\t\t\tconst unique = this.dice(tuple).getCells();\n\t\t\tif (!unique.length) {\n\t\t\t\tconst foreignKeysCellData = {};\n\t\t\t\tObject.keys(tuple).forEach(dimension => {\n\t\t\t\t\tconst dimensionTree = getDimensionTreeByDimension.call(this, dimension);\n\t\t\t\t\tconst dimensionTable = dimensionTree.getTreeValue();\n\t\t\t\t\tconst { foreignKey } = dimensionTable;\n\t\t\t\t\tforeignKeysCellData[foreignKey] = dimensionTable.getMemberPrimaryKey(tuple[dimension])\n\t\t\t\t});\n\t\t\t\tconst cellData = {\n\t\t\t\t\t...this.defaultFactOptions,\n\t\t\t\t\t...cellOptions,\n\t\t\t\t\t...foreignKeysCellData,\n\t\t\t\t};\n\t\t\t\t// todo нужна правеврка на то, что все свойства присутствуют, для этого нужна инф-ия о именах таких полей в схеме\n\t\t\t\tconst cell = EmptyCell.createEmptyCell(cellData);\n\t\t\t\temptyCells.push(cell);\n\t\t\t}\n\t\t});\n\t\treturn emptyCells;\n\t}\n\t/**\n\t * @public\n\t * @return {EmptyCell[]}\n\t * */\n\tgetEmptyCells() {\n\t\treturn this.getCells().filter(cell => EmptyCell.isEmptyCell(cell))\n\t}\n\t/**\n\t * @public\n\t * @param {Cell} cell\n\t * @return {boolean}\n\t * */\n\tisEmptyCell(cell) {\n\t\treturn EmptyCell.isEmptyCell(cell);\n\t}\n\t/**\n\t * @public\n\t * @param {EmptyCell[]} emptyCells\n\t * @throw {TypeError}\n\t * */\n\taddEmptyCells(emptyCells) {\n\t\tif (!Array.isArray(emptyCells)){\n\t\t\tthrow TypeError('The argument must be instance of Array')\n\t\t}\n\t\temptyCells.forEach((emptyCell, index) => {\n\t\t\tif (!this.isEmptyCell(emptyCell)) {\n\t\t\t\tthrow TypeError(`Some item in list of argument is not instances of EmptyCell, index: ${index}`)\n\t\t\t}\n\t\t});\n\t\t[].push.apply(this.getCells(), emptyCells);\n\t}\n\t/**\n\t * @public\n\t * Filling method for full size of cube\n\t * @param {object?} cellOptions - properties for empty cells\n\t * */\n\tfillEmptyCells(cellOptions) {\n\t\t// todo why here residuals? add test for that\n\t\tif (!residuals(this).length) {\n\t\t\tconst emptyCells = this.createEmptyCells(cellOptions);\n\t\t\tthis.addEmptyCells(emptyCells);\n\t\t}\n\t}\n\t/**\n\t * Check that the argument is an instance of SubCube\n\t * @return {boolean}\n\t * */\n\tisSubCube(){\n\t\treturn this instanceof SubCube;\n\t}\n\t/**\n\t * Cartesian product - list of all possible tuples\n\t * @param {Cube} cube\n\t * @return {Tuple[]}\n\t * */\n\tstatic cartesian(cube) {\n\t\tif (!(cube instanceof Cube)){\n\t\t\tthrow TypeError('The argument must be instance of Cube')\n\t\t}\n\t\tconst f = (a, b) => [].concat(...a.map(d => {\n\t\t\treturn b.map(e => {\n\t\t\t\treturn [].concat(d, e)\n\t\t\t})\n\t\t}));\n\t\t\n\t\tconst cartesian = (a, b, ...c) => {\n\t\t\treturn b ? cartesian(f(a, b), ...c) : a\n\t\t};\n\t\t\n\t\tconst dimensionsOrder = [];\n\t\t\n\t\tconst set = cube.dimensionHierarchies.map(dimensionTree => dimensionTree.getTreeValue()).map(dimensionTable => {\n\t\t\tdimensionsOrder.push(dimensionTable.dimension);\n\t\t\treturn dimensionTable.members;\n\t\t});\n\t\t\n\t\tconst tupleList = [];\n\t\t\n\t\tlet res;\n\t\tif (set.length) {\n\t\t\tif (set.length > 1) {\n\t\t\t\tres = cartesian.apply(null, set);\n\t\t\t} else {\n\t\t\t\tres = set[0].map(i => [i])\n\t\t\t}\n\t\t\tres.forEach(arr => {\n\t\t\t\tconst item = {};\n\t\t\t\tdimensionsOrder.forEach((dimension, index) => {\n\t\t\t\t\titem[dimension] = arr[index]\n\t\t\t\t});\n\t\t\t\ttupleList.push(new Tuple(item));\n\t\t\t\treturn item;\n\t\t\t});\n\t\t}\n\t\t\n\t\treturn tupleList;\n\t}\n}\n\n/**\n * SubCube is the target cube whose members are members of the source cube.\n * */\nclass SubCube extends Cube {\n\tconstructor({originalCube, previousCube, ...rest}){\n\t\tsuper(rest);\n\t\t/** link for chaining between operations */\n\t\tthis.originalCube = originalCube;\n\t\t/** link for chaining between operations */\n\t\tthis.previousCube = previousCube;\n\t}\n}\n\n/**\n * @this {Cube}\n * @return {DimensionHierarchy}\n * */\nfunction getHierarchy(hierarchy) {\n\treturn this.dimensionHierarchies.find(dimensionHierarchy => {\n\t\treturn dimensionHierarchy.getHierarchy() === hierarchy\n\t});\n}\n/**\n * @this {Cube}\n * @return {DimensionTree}\n * */\nfunction getDimensionTreeByDimension(dimension) {\n\tlet findDimensionTree;\n\tthis.dimensionHierarchies.forEach(dimensionTree => {\n\t\tconst searchedDimensionTree = dimensionTree.getDimensionTreeByDimension(dimension);\n\t\tif (searchedDimensionTree) {\n\t\t\tfindDimensionTree = dimensionTree.getDimensionTreeByDimension(dimension);\n\t\t}\n\t});\n\tif (!findDimensionTree) {\n\t\tthrow RangeError(`Not existed dimension: ${dimension}`);\n\t}\n\treturn findDimensionTree;\n}\n/**\n * @this {Cube}\n * @return {DimensionTree[]}\n * */\nfunction getDimensionTrees() {\n\treturn this.dimensionHierarchies.map(dimensionHierarchy => {\n\t\treturn dimensionHierarchy.getDimensionTree\n\t\t\t? dimensionHierarchy.getDimensionTree()\n\t\t\t: dimensionHierarchy\n\t})\n}\n/**\n * @private\n * Get facts from cube\n * */\nfunction denormalize(cells = this.getCells(), forSave = true) {\n\tconst data = SnowflakeBuilder.denormalize(cells, getDimensionTrees.call(this));\n\tif (forSave) {\n\t\tdata.forEach((data, index) => {\n\t\t\tif (cells[index] instanceof EmptyCell) {\n\t\t\t\tdelete data[this.factPrimaryKey];\n\t\t\t}\n\t\t})\n\t}\n\treturn data;\n}\n/**\n * @public\n * Residuals - list of tuples, according to which there is more than one member\n * @return {Tuple[]}\n * */\nfunction residuals(cube) {\n\tconst tuples = Cube.cartesian(cube);\n\tconst totalTuples = [];\n\ttuples.forEach(tuple => {\n\t\tconst partFacts = cube.dice(tuple).getFacts();\n\t\tif (partFacts.length > 1) {\n\t\t\ttotalTuples.push(tuple)\n\t\t}\n\t});\n\treturn totalTuples;\n}\n/**\n * Unfilled - list of tuples, in accordance with which there is not a single member\n * @@param {Cube} cube\n * */\nfunction unfilled(cube) {\n\tconst tuples = Cube.cartesian(cube);\n\tconst unfilled = [];\n\ttuples.forEach(tuple => {\n\t\tconst members = this.dice(tuple).getFacts(tuple);\n\t\tif (members.length === 0) {\n\t\t\tunfilled.push(tuple)\n\t\t}\n\t});\n\treturn unfilled;\n}\n\nfunction validateFactData(factPrimaryKey, factData){\n\tif (!factData.hasOwnProperty(factPrimaryKey)) {\n\t\tthrow new NotFoundFactId(factPrimaryKey)\n\t}\n}\n\nexport default Cube"],"names":["InsufficientRollupData","dimension","id","message","NotFoundFactId","name","DimensionException","handleError","error","originalConsole","console","customConsole","log","string","warn","warnOnce","memory","isSimple","value","type","Fact","data","key","hasOwnProperty","Cell","uuidv4","replace","c","r","Math","random","v","toString","EmptyCell","options","generateId","cell","Member","Object","assign","DEFAULT_TEMPLATE_FOREIGN_KEY","DEFAULT_FACT_ID_PROP","DEFAULT_MEMBER_ID_PROP","InputMember","SnowflakeBuilder","factTable","cells","dimensionsTrees","cellTable","factPrimaryKey","forEach","dimensionTree","anotherBuildOne","tracePostOrder","dimensionTable","processDimension","getTreeValue","keyProps","otherProps","memberList","members","foreignKey","primaryKey","childIdAttributes","getChildTrees","map","childDimensions","totalMemberList","existMemberCount","length","args","keyIdMap","createKeyIdMap","apply","createMembersDataByKeyIdMap","entitiesParts","childIdAttribute","index","firstChildDimension","getDimensionTreeByDimension","memberListForFilter","mapFilter","countId","entitiesPart","membersData","entitiesArgs","push","part","find","etalon","member","entityPart","totalMemberListCount","startFrom","memberData","deleteProps","fact","props","prop","addMember","cellTables","cellTableFiltered","filter","getMemberPrimaryKey","restoredCache","existedCells","indexOf","surrogateKey","createKeyFromProps","keys","createMemberData","concat","defaultValue","defaultData","propName","createdMemberData","obj","DIVIDER","join","removedCells","dimensionHierarchies","cube","removedCell","splice","travers","removeMembers","bind","restoreCell","dimensionTrees","facts","memberCopy","deleteMemberId","dicedCube","dice","getCells","removeMember","handlers","handleDimensionTree","idValue","handler","tracePreOrder","tracedDimensionTable","tracedDimensionTree","DimensionTable","genericId","defaultMemberOptions","Error","memberOptions","linkProps","reduceId","createInputMember","reduce","acc","curValue","Tree","getParentTree","root","traceUpOrder","tracedTreeValue","tracedTree","isRoot","callback","tree","parentTree","treeValue","childTrees","childTree","DimensionTree","level","parentNode","defineProperties","createDimensionTable","editable","enumerable","dimensionTreeData","validateDimensions","dimensions","tracedDimensionTreeValue","getRoot","search","dimensionTreeValue","newDimensionTreeByMember","cloneDimensionTreeWithoutMembers","projectDrillDown","projectDrillUp","projectDrill","traceMethodName","method","lastTracedMembers","lastTracedDimensionTree","tracedDimension","drillMembers","setMemberList","clone","clearMemberList","projectionDimensionTree","subtractDimensionTree","endToBeRemovedMember","dimensionProjection","membersProjection","toBeRemovedSpace","childMembers","childDimension","currentDimensionTree","toBeAddedSpace","parentDimensionTable","parentMembers","parentMember","getMemberForeignKey","isExternal","childDimensionTable","childMember","createMember","newDimensionTree","DimensionHierarchy","activeDimension","hierarchy","createDimensionTree","dimensionHierarchy","Tuple","Space","newSpace","arg","arguments","space","add","targetSpace","otherSpace","Array","prototype","getTag","undefined","call","isObjectLike","isPlainObject","getPrototypeOf","proto","Cube","TypeError","defaultFactOptions","createDimensionHierarchy","cellData","isEmptyCell","set","toMultiset","isArray","toOriginal","RangeError","originalMultiset","dimensionHierarchiesLength","projectionDimensionHierarchies","totalSpaces","dimensionTreeProjection","spacesForCells","searchedInTree","current","unionDimensionTree","totalSpace","union","filteredCellTable","cellBelongsToSpace","somePropOfCellNotBelongToSpace","some","finded","newDimensionHierarchies","originalDimensionHierarchy","projectionDimensionHierarchy","createProxyDimensionTree","memberBelongToCells","filteredCell","has","removeProjectionOntoMember","SubCube","originalCube","previousCube","targetDimension","currentHierarchy","getHierarchy","hasDimension","setActiveDimension","denormalize","validateFactData","getFacts","anotherBuild","getDimensionTrees","removeCells","destroy","customMemberOptions","rollupCoordinatesData","drillDownCoordinatesOptions","getDimensionMembers","childDimensionTrees","foreignKeysMemberData","childDimensionTree","saveMember","saveIdAttribute","parentDimension","parentIdAttribute","drillDownCoordinatesData","fillEmptyCells","endToBeRemoved","getRemoveMeasures","removedMeasures","destroyDimensionTree","cellOptions","emptyCells","tuples","cartesian","tuple","unique","foreignKeysCellData","createEmptyCell","emptyCell","residuals","createEmptyCells","addEmptyCells","f","a","b","d","e","dimensionsOrder","tupleList","res","i","arr","item","rest","findDimensionTree","searchedDimensionTree","getDimensionTree","forSave","totalTuples","partFacts","factData"],"mappings":"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"}